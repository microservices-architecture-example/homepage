{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#documentacao-dos-microservicos","title":"Documenta\u00e7\u00e3o dos Microservi\u00e7os","text":""},{"location":"#estrutura-atual-dos-microservicos","title":"Estrutura atual dos microservi\u00e7os","text":"<pre><code>flowchart LR\n    subgraph api [Subnet API]\n        direction TB\n        gateway --&gt; account\n        gateway --&gt; auth:::red\n        gateway --&gt; product\n        gateway --&gt; order\n        gateway --&gt; exchange\n        auth --&gt; account\n        order --&gt; product\n        account --&gt; db@{ shape: cyl, label: \"Database\" }\n        product --&gt; db\n        order --&gt; db\n    end\n    exchange e3@==&gt; 3partyapi:::green@{label: \"3rd-party API\"}\n    internet e2@==&gt; |request| gateway:::orange\n    e2@{ animate: true }\n    e3@{ animate: true }\n    classDef green fill:#cfc\n    classDef orange fill:#FCBE3E</code></pre>"},{"location":"#repositorios","title":"Reposit\u00f3rios","text":"<p>Principal:  main</p> Microservice Interface Implementation Account account account-service Auth auth auth-service Gateway gateway-service Product product product-service Order order order-service Exchange exchange-service"},{"location":"account/account/","title":"1. Account API","text":""},{"location":"account/account/#account-api","title":"Account API","text":"<p>A Account API \u00e9 respons\u00e1vel pela gest\u00e3o das contas de usu\u00e1rio no dom\u00ednio <code>store</code>. Ela realiza opera\u00e7\u00f5es de cadastro, consulta, atualiza\u00e7\u00e3o e exclus\u00e3o de contas, servindo como base para autentica\u00e7\u00e3o e relacionamento entre os demais servi\u00e7os (auth, order, product, etc.).</p> <p>Trusted layer e seguran\u00e7a</p> <p>Toda requisi\u00e7\u00e3o externa entra pelo gateway. As rotas <code>/account/**</code> s\u00e3o protegidas: \u00e9 obrigat\u00f3rio enviar <code>Authorization: Bearer &lt;jwt&gt;</code>.</p>"},{"location":"account/account/#visao-geral","title":"Vis\u00e3o geral","text":"<ul> <li>Interface (<code>account</code>): define o contrato (DTOs e Feign) consumido por outros m\u00f3dulos/fronts.  </li> <li>Service (<code>account.service</code>): implementa\u00e7\u00e3o REST, regras de neg\u00f3cio, persist\u00eancia (JPA), e migra\u00e7\u00f5es (Flyway).  </li> </ul> <pre><code>classDiagram\n    namespace account {\n        class AccountController {\n            +create(AccountIn accountIn): AccountOut\n            +delete(String id): void\n            +findAll(): List&lt;AccountOut&gt;\n            +findById(String id): AccountOut\n        }\n        class AccountIn {\n            -String name\n            -String email\n            -String password\n        }\n        class AccountOut {\n            -String id\n            -String name\n            -String email\n        }\n    }\n    namespace account.service {\n        class AccountResource {\n            +create(AccountIn accountIn): AccountOut\n            +delete(String id): void\n            +findAll(): List&lt;AccountOut&gt;\n            +findById(String id): AccountOut\n        }\n        class AccountService {\n            +create(AccountIn accountIn): AccountOut\n            +delete(String id): void\n            +findAll(): List&lt;AccountOut&gt;\n            +findById(String id): AccountOut\n        }\n        class AccountRepository {\n            +create(AccountIn accountIn): AccountOut\n            +delete(String id): void\n            +findAll(): List&lt;AccountOut&gt;\n            +findById(String id): AccountOut\n        }\n        class Account {\n            -String id\n            -String name\n            -String email\n            -String password\n            -String sha256\n        }\n        class AccountModel {\n            +create(AccountIn accountIn): AccountOut\n            +delete(String id): void\n            +findAll(): List&lt;AccountOut&gt;\n            +findById(String id): AccountOut\n        }\n    }\n    &lt;&lt;Interface&gt;&gt; AccountController\n    AccountController ..&gt; AccountIn\n    AccountController ..&gt; AccountOut\n\n    &lt;&lt;Interface&gt;&gt; AccountRepository\n    AccountController &lt;|-- AccountResource\n    AccountResource *-- AccountService\n    AccountService *-- AccountRepository\n    AccountService ..&gt; Account\n    AccountService ..&gt; AccountModel\n    AccountRepository ..&gt; AccountModel</code></pre>"},{"location":"account/account/#estrutura-da-requisicao","title":"Estrutura da requisi\u00e7\u00e3o","text":"<pre><code>flowchart LR\n    subgraph api [Trusted Layer]\n        direction TB\n        account e3@==&gt; db@{ shape: cyl, label: \"Database\" }\n    end\n    internet e1@==&gt;|request| account:::red\n    e1@{ animate: true }\n    e3@{ animate: true }\n    classDef red fill:#fcc</code></pre>"},{"location":"account/account/#account","title":"Account","text":"<pre><code>\ud83d\udcc1 api/\n\u2514\u2500\u2500 \ud83d\udcc1 account/\n    \u251c\u2500\u2500 \ud83d\udcc1 src/\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc1 main/\n    \u2502       \u2514\u2500\u2500 \ud83d\udcc1 java/\n    \u2502           \u2514\u2500\u2500 \ud83d\udcc1 store/\n    \u2502               \u2514\u2500\u2500 \ud83d\udcc1 account/\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 AccountController.java\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 AccountIn.java\n    \u2502                   \u2514\u2500\u2500 \ud83d\udcc4 AccountOut.java\n    \u251c\u2500\u2500 \ud83d\udcc4 pom.xml\n    \u2514\u2500\u2500 \ud83d\udcc4 Jenkinsfile\n</code></pre> Source pom.xmlJenkinsfileAccountControllerAccountInAccountOut <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;3.5.5&lt;/version&gt;\n        &lt;relativePath/&gt;\n    &lt;/parent&gt;\n\n    &lt;groupId&gt;store&lt;/groupId&gt;\n    &lt;artifactId&gt;account&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt;\n\n    &lt;properties&gt;\n        &lt;java.version&gt;21&lt;/java.version&gt;\n        &lt;spring-cloud.version&gt;2025.0.0&lt;/spring-cloud.version&gt;\n        &lt;maven.compiler.proc&gt;full&lt;/maven.compiler.proc&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n                &lt;version&gt;${spring-cloud.version}&lt;/version&gt;\n                &lt;type&gt;pom&lt;/type&gt;\n                &lt;scope&gt;import&lt;/scope&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n\n&lt;/project&gt;\n</code></pre> <pre><code>pipeline {\n    agent any\n\n    stages {\n        stage('Build') {\n            steps {\n                sh 'mvn -B -DskipTests clean install'\n            }\n        }\n    }\n\n}\n</code></pre> AccountController.java<pre><code>package store.account;\n\nimport java.util.List;\n\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestHeader;\n\n@FeignClient(name = \"account\", url = \"http://account:8080\")\npublic interface AccountController {\n\n    @PostMapping(\"/account\")\n    public ResponseEntity&lt;AccountOut&gt; create(\n        @RequestBody AccountIn in\n    );\n\n    @GetMapping(\"/account/{id}\")\n    public ResponseEntity&lt;AccountOut&gt; findById(\n        @PathVariable(\"id\") String id\n    );\n\n    @PostMapping(\"/account/login\")\n    public ResponseEntity&lt;AccountOut&gt; findByEmailAndPassword(\n        @RequestBody AccountIn in\n    );\n\n    @GetMapping(\"/account\")\n    public ResponseEntity&lt;List&lt;AccountOut&gt;&gt; findAll(\n    );\n\n    @DeleteMapping(\"/account/{id}\")\n    public ResponseEntity&lt;Void&gt; delete(\n        @PathVariable(\"id\") String id\n    );\n\n    @GetMapping(\"/account/whoami\")\n    public ResponseEntity&lt;AccountOut&gt; whoAmI(\n        @RequestHeader(value = \"id-account\", required = true) String idAccount\n    );\n\n}\n</code></pre> AccountIn.java<pre><code>package store.account;\n\nimport lombok.Builder;\n\n@Builder\npublic record AccountIn(\n    String name,\n    String email,\n    String password\n) {\n\n}\n</code></pre> AccountOut.java<pre><code>package store.account;\n\nimport lombok.Builder;\n\n@Builder\npublic record AccountOut(\n    String id,\n    String name,\n    String email,\n    Role role\n) {\n\n}\n</code></pre> mvn clean install"},{"location":"account/account/#accountservice","title":"account.service","text":"<pre><code>\ud83d\udcc1 api/\n\u2514\u2500\u2500 \ud83d\udcc1 account.service/\n    \u251c\u2500\u2500 \ud83d\udcc1 k8s/\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc4 k8s.yaml\n    \u251c\u2500\u2500 \ud83d\udcc1 src/\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc1 main/\n    \u2502       \u251c\u2500\u2500 \ud83d\udcc1 java/\n    \u2502       \u2502   \u2514\u2500\u2500 \ud83d\udcc1 store/\n    \u2502       \u2502       \u2514\u2500\u2500 \ud83d\udcc1 account/\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 Account.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 AccountApplication.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 AccountModel.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 AccountParser.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 AccountRepository.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 AccountResource.java\n    \u2502       \u2502           \u2514\u2500\u2500 \ud83d\udcc4 AccountService.java\n    \u2502       \u2514\u2500\u2500 \ud83d\udcc1 resources/\n    \u2502           \u251c\u2500\u2500 \ud83d\udcc4 application.yaml\n    \u2502           \u2514\u2500\u2500 \ud83d\udcc1 db/\n    \u2502               \u2514\u2500\u2500 \ud83d\udcc1 migration/\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 V2025.08.29.001__create_schema.sql\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 V2025.08.29.002__create_table_account.sql\n    \u2502                   \u2514\u2500\u2500 \ud83d\udcc4 V2025.09.02.001__create_index_email.sql\n    \u251c\u2500\u2500 \ud83d\udcc4 pom.xml\n    \u251c\u2500\u2500 \ud83d\udcc4 Dockerfile\n    \u2514\u2500\u2500 \ud83d\udcc4 Jenkinsfile\n</code></pre> Source pom.xmlDockerfileJenkinsfilek8s.yamlapplication.yamlAccount.javaAccountApplication.javaAccountModel.javaAccountParser.javaAccountRepository.javaAccountResource.javaAccountService.javaV2025.08.29.001__create_schema.sqlV2025.08.29.002__create_table_account.sqlV2025.09.02.001__create_index_email.sql <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;3.5.5&lt;/version&gt;\n        &lt;relativePath/&gt;\n    &lt;/parent&gt;\n\n    &lt;groupId&gt;store&lt;/groupId&gt;\n    &lt;artifactId&gt;account-service&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt;\n\n    &lt;properties&gt;\n        &lt;java.version&gt;21&lt;/java.version&gt;\n        &lt;spring-cloud.version&gt;2025.0.0&lt;/spring-cloud.version&gt;\n        &lt;maven.compiler.proc&gt;full&lt;/maven.compiler.proc&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;\n            &lt;artifactId&gt;account&lt;/artifactId&gt;\n            &lt;version&gt;${project.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;\n            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.flywaydb&lt;/groupId&gt;\n            &lt;artifactId&gt;flyway-core&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.flywaydb&lt;/groupId&gt;\n            &lt;artifactId&gt;flyway-database-postgresql&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n\n    &lt;/dependencies&gt;\n\n    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n                &lt;version&gt;${spring-cloud.version}&lt;/version&gt;\n                &lt;type&gt;pom&lt;/type&gt;\n                &lt;scope&gt;import&lt;/scope&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n                &lt;configuration&gt;\n                    &lt;excludes&gt;\n                        &lt;exclude&gt;\n                            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n                            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n                        &lt;/exclude&gt;\n                    &lt;/excludes&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n\n&lt;/project&gt;\n</code></pre> <pre><code>FROM openjdk:23-slim\nVOLUME /tmp\nCOPY target/*.jar app.jar\nENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]\n</code></pre> <pre><code>pipeline {\n    agent any\n    environment {\n        SERVICE = 'account'\n        NAME = \"luigilopesz/${env.SERVICE}\"\n    }\n    stages {\n        stage('Dependecies') {\n            steps {\n                build job: 'account', wait: true\n            }\n        }\n        stage('Build') { \n            steps {\n                sh 'mvn -B -DskipTests clean package'\n            }\n        }      \n        stage('Build &amp; Push Image') {\n            steps {\n                withCredentials([usernamePassword(\n                    credentialsId: 'dockerhub-credential',\n                    usernameVariable: 'USERNAME',\n                    passwordVariable: 'TOKEN')])\n                {\n                    sh \"docker login -u $USERNAME -p $TOKEN\"\n                    sh \"docker buildx create --use --platform=linux/arm64,linux/amd64 --node multi-platform-builder-${env.SERVICE} --name multi-platform-builder-${env.SERVICE}\"\n                    sh \"docker buildx build --platform=linux/arm64,linux/amd64 --push --tag ${env.NAME}:latest --tag ${env.NAME}:${env.BUILD_ID} -f Dockerfile .\"\n                    sh \"docker buildx rm --force multi-platform-builder-${env.SERVICE}\"\n                }\n            }\n        }\n    }\n}\n</code></pre> <pre><code>\n</code></pre> <pre><code>\n</code></pre> <pre><code>package store.account;\n\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.experimental.Accessors;\n\n@Builder @Data @Accessors(fluent = true, chain = true)\npublic class Account {\n\n    private String id;\n    private String name;\n    private String email;\n    private String password;\n    private String sha256;\n\n}\n</code></pre> <pre><code>package store.account;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.openfeign.EnableFeignClients;\n\n@EnableFeignClients(basePackages = {\n})\n@SpringBootApplication\npublic class AccountApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(AccountApplication.class, args);\n    }\n\n}\n</code></pre> <pre><code>package store.account;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Table;\nimport lombok.AllArgsConstructor;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\nimport lombok.experimental.Accessors;\n\n@Entity\n@Table(name = \"account\")\n@Setter @Accessors(chain = true, fluent = true)\n@NoArgsConstructor @AllArgsConstructor\npublic class AccountModel {\n\n    @Id\n    @Column(name = \"id\")\n    @GeneratedValue(strategy = GenerationType.UUID)\n    private String id;\n\n    @Column(name = \"name\")\n    private String name;\n\n    @Column(name = \"email\")\n    private String email;\n\n    @Column(name = \"sha256\")\n    private String sha256;\n\n    public AccountModel(Account a) {\n        this.id = a.id();\n        this.name = a.name();\n        this.email = a.email();\n        this.sha256 = a.sha256();\n    }\n\n    public Account to() {\n        return Account.builder()\n            .id(this.id)\n            .name(this.name)\n            .email(this.email)\n            .sha256(this.sha256)\n            .build();\n    }\n\n}\n</code></pre> <pre><code>package store.account;\n\nimport java.util.List;\n\npublic class AccountParser {\n\n    public static Account to(AccountIn in) {\n        return in == null ? null :\n            Account.builder()\n                .name(in.name())\n                .email(in.email())\n                .password(in.password())\n                .build();\n    }\n\n    public static AccountOut to(Account a) {\n        return a == null ? null :\n            AccountOut.builder()\n                .id(a.id())\n                .name(a.name())\n                .email(a.email())\n                .build();\n    }\n\n    public static List&lt;AccountOut&gt; to(List&lt;Account&gt; as) {\n        return as == null ? null :\n            as.stream().map(AccountParser::to).toList();\n    }\n\n}\n</code></pre> <pre><code>package store.account;\n\nimport java.util.Optional;\n\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface AccountRepository extends CrudRepository&lt;AccountModel, String&gt; {\n\n    AccountModel findByEmail(String email);\n    Optional&lt;AccountModel&gt; findByEmailAndSha256(String email, String sha256);\n\n}\n</code></pre> <pre><code>package store.account;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.server.ResponseStatusException;\nimport org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n\n@RestController\npublic class AccountResource implements AccountController {\n\n    @Autowired\n    private AccountService accountService;\n\n    @Override\n    public ResponseEntity&lt;AccountOut&gt; create(AccountIn in) {\n        // parser AccountIn to Account\n        Account account = AccountParser.to(in);\n\n        Account saved = accountService.create(account);\n\n        // parser Account to AccountOut and build to\n        // HATEAOS standard\n        return ResponseEntity\n            .created(\n                ServletUriComponentsBuilder.fromCurrentRequest()\n                    .path(\"/{id}\")\n                    .buildAndExpand(saved.id())\n                    .toUri()\n            ).body(AccountParser.to(saved));\n    }\n\n    @Override\n    public ResponseEntity&lt;AccountOut&gt; findById(String id) {\n        return ResponseEntity\n            .ok(AccountParser.to(accountService.findById(id)));\n    }\n\n    @Override\n    public ResponseEntity&lt;AccountOut&gt; findByEmailAndPassword(AccountIn in) {\n        return ResponseEntity\n            .ok()\n            .body(AccountParser.to(\n                accountService.findByEmailAndPassword(in.email(), in.password())\n            ));\n    }\n\n    @Override\n    public ResponseEntity&lt;List&lt;AccountOut&gt;&gt; findAll() {\n        return ResponseEntity\n            .ok()\n            .body(AccountParser.to(accountService.findAll()));\n    }\n\n    @Override\n    public ResponseEntity&lt;Void&gt; delete(String id) {\n        accountService.delete(id);\n        return ResponseEntity\n            .noContent()\n            .build();\n    }\n\n    @Override\n    public ResponseEntity&lt;AccountOut&gt; whoAmI(String idAccount) {\n        final Account found = accountService.findById(idAccount);\n        if (found == null) {\n            throw new ResponseStatusException(HttpStatus.NOT_FOUND);\n        }\n        return ResponseEntity.ok(AccountParser.to(found));\n    }\n\n}\n</code></pre> <pre><code>package store.account;\n\nimport java.nio.charset.StandardCharsets;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Base64;\nimport java.util.List;\nimport java.util.stream.StreamSupport;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.server.ResponseStatusException;\n\n@Service\npublic class AccountService {\n\n    private Logger looger = LoggerFactory.getLogger(AccountService.class);\n\n    @Autowired\n    private AccountRepository accountRepository;\n\n    public Account create(Account account) {\n        if (null == account.password()) {\n            throw new ResponseStatusException(HttpStatus.BAD_REQUEST,\n                \"Password is mandatory!\"\n            );\n        }\n        // clean special caracters\n        account.password(account.password().trim());\n        if (account.password().length() &lt; 4) {\n            throw new ResponseStatusException(HttpStatus.BAD_REQUEST,\n                \"Password is too short!\"\n            );\n        }\n        if (null == account.email()) {\n            throw new ResponseStatusException(HttpStatus.BAD_REQUEST,\n                \"Email is mandatory!\"\n            );\n        }\n\n        if (accountRepository.findByEmail(account.email()) != null)\n            throw new ResponseStatusException(HttpStatus.BAD_REQUEST,\n                \"Email already have been registered!\"\n            );\n\n        account.sha256(hash(account.password()));\n\n        return accountRepository.save(\n            new AccountModel(account)\n        ).to();\n    }\n\n    public List&lt;Account&gt; findAll() {\n        return StreamSupport.stream(\n            accountRepository.findAll().spliterator(), false)\n            .map(AccountModel::to)\n            .toList();\n    }\n\n    public Account findById(String id) {\n        return accountRepository.findById(id).map(AccountModel::to).orElse(null);\n    }\n\n    public Account findByEmailAndPassword(String email, String password) {\n        String sha256 = hash(password);\n        return accountRepository.findByEmailAndSha256(email, sha256).map(AccountModel::to).orElse(null);\n    }\n\n    public void delete(String id) {\n        accountRepository.delete(accountRepository.findById(id).orElseThrow(() -&gt;\n            new ResponseStatusException(HttpStatus.NOT_FOUND, \"Account not found!\")\n        ));\n    }\n\n    private String hash(String pass) {\n        try {\n            MessageDigest digest = MessageDigest.getInstance(\"SHA-256\");\n            byte[] encodedHash = digest.digest(\n                pass.getBytes(StandardCharsets.UTF_8)\n            );\n            return Base64.getEncoder().encodeToString(encodedHash);\n        } catch (NoSuchAlgorithmException e) {\n            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, e.getMessage(), e);\n        }\n    }\n\n}\n</code></pre> <pre><code>\n</code></pre> <pre><code>CREATE TABLE account\n(\n    id varchar(36) NOT NULL,\n    name varchar(255) NOT NULL,\n    email varchar(255) NOT NULL,\n    sha256 varchar(64) NOT NULL,\n    CONSTRAINT account_pkey PRIMARY KEY (id)\n)\n</code></pre> <pre><code>\n</code></pre> mvn clean package spring-boot:run"},{"location":"auth/auth/","title":"2. Auth API","text":""},{"location":"auth/auth/#auth-api","title":"Auth API","text":"<p>A Auth API \u00e9 respons\u00e1vel pela autentica\u00e7\u00e3o de usu\u00e1rios e gera\u00e7\u00e3o de tokens JWT utilizados por todos os demais microservi\u00e7os do dom\u00ednio <code>store</code>. Ela valida credenciais, emite tokens de acesso e garante a integridade das comunica\u00e7\u00f5es dentro da arquitetura de microsservi\u00e7os.</p> <p>Trusted layer e seguran\u00e7a</p> <p>O acesso \u00e0 Auth API \u00e9 realizado via Gateway. Ap\u00f3s o login, o JWT \u00e9 retornado ao cliente e utilizado nas demais requisi\u00e7\u00f5es aos servi\u00e7os protegidos (<code>account</code>, <code>order</code>, <code>product</code>, <code>exchange</code>).</p>"},{"location":"auth/auth/#visao-geral","title":"Vis\u00e3o geral","text":"<ul> <li> <p>Service (<code>auth.service</code>): Implementado em Spring Boot (Java).   Exp\u00f5e endpoints p\u00fablicos para autentica\u00e7\u00e3o e registro de usu\u00e1rios.   Integra-se com o <code>account.service</code> para valida\u00e7\u00e3o de usu\u00e1rios e gera tokens JWT assinados com a chave definida em <code>JWT_SECRET_KEY</code>.</p> </li> <li> <p>Fluxo de autentica\u00e7\u00e3o </p> </li> <li>O cliente envia <code>email</code> e <code>password</code> para <code>/auth/login</code>.  </li> <li>O Auth API valida as credenciais no <code>account.service</code>.  </li> <li>Em caso de sucesso, \u00e9 gerado e retornado o <code>token JWT</code>.  </li> <li>O <code>gateway-service</code> utiliza esse token para validar requisi\u00e7\u00f5es futuras e injetar o <code>id-account</code> nos headers.</li> </ul> <pre><code>classDiagram\n    namespace auth {\n        class AuthController {\n            +register(RegisterIn RegisterIn): TokenOut\n            +login(LoginIn loginIn): TokenOut\n        }\n        class RegisterIn {\n            -String name\n            -String email\n            -String password\n        }\n        class LoginIn {\n            -String name\n            -String email\n        }\n        class TokenOut {\n            -String token\n        }\n        class SolveOut {\n            -String idAccount\n        }\n    }\n    namespace auth.service {\n        class AuthResource {\n            +register(RegisterIn RegisterIn) TokenOut\n            +login(LoginIn loginIn) TokenOut\n        }\n        class AuthService {\n            +register(Register) Regiter\n            +login(LoginIn loginIn) String\n        }\n        class Register {\n            -String id\n            -String name\n            -String email\n            -String password\n        }\n    }\n    &lt;&lt;Interface&gt;&gt; AuthController\n    AuthController ..&gt; RegisterIn\n    AuthController ..&gt; LoginIn\n    AuthController ..&gt; TokenOut\n\n    AuthController &lt;|-- AuthResource\n    AuthResource *-- AuthService\n    AuthService ..&gt; Register</code></pre>"},{"location":"auth/auth/#estrutura-da-requisicao","title":"Estrutura da requisi\u00e7\u00e3o","text":"<pre><code>flowchart LR\n    subgraph api [Trusted Layer]\n        direction TB\n        gateway --&gt; account\n        gateway --&gt; others\n        gateway e4 @==&gt;|\"\"| auth:::red\n        auth e2 @==&gt;|\"\"| account\n        account --&gt; db @{ shape: cyl, label: \"Database\" }\n        others --&gt; db\n    end\n    internet e1 @==&gt;|request| gateway:::orange\n    e1@{ animate: true }\n    e2 @{ animate: true }\n    e4 @{ animate: true }\n    classDef red fill:#fcc\n    classDef orange fill:#FCBE3E</code></pre>"},{"location":"auth/auth/#auth","title":"Auth","text":"<pre><code>\ud83d\udcc1 api/\n\u2514\u2500\u2500 \ud83d\udcc1 auth/\n    \u251c\u2500\u2500 \ud83d\udcc1 src/\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc1 main/\n    \u2502       \u2514\u2500\u2500 \ud83d\udcc1 java/\n    \u2502           \u2514\u2500\u2500 \ud83d\udcc1 store/\n    \u2502               \u2514\u2500\u2500 \ud83d\udcc1 auth/\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 AuthController.java\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 LoginIn.java\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 RegisterIn.java\n    \u2502                   \u2514\u2500\u2500 \ud83d\udcc4 TokenOut.java\n    \u251c\u2500\u2500 \ud83d\udcc4 pom.xml\n    \u2514\u2500\u2500 \ud83d\udcc4 Jenkinsfile\n</code></pre> Source pom.xmlJenkinsfileAuthController.javaLoginIn.javaRegisterIn.javaTokenOut.java <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;3.5.5&lt;/version&gt;\n        &lt;relativePath/&gt;\n    &lt;/parent&gt;\n\n    &lt;groupId&gt;store&lt;/groupId&gt;\n    &lt;artifactId&gt;auth&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt;\n\n    &lt;properties&gt;\n        &lt;java.version&gt;21&lt;/java.version&gt;\n        &lt;spring-cloud.version&gt;2025.0.0&lt;/spring-cloud.version&gt;\n        &lt;maven.compiler.proc&gt;full&lt;/maven.compiler.proc&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n                &lt;version&gt;${spring-cloud.version}&lt;/version&gt;\n                &lt;type&gt;pom&lt;/type&gt;\n                &lt;scope&gt;import&lt;/scope&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n\n&lt;/project&gt;\n</code></pre> <pre><code>pipeline {\n    agent any\n\n    stages {\n        stage('Build') {\n            steps {\n                sh 'mvn -B -DskipTests clean install'\n            }\n        }\n    }\n\n}\n</code></pre> <pre><code>package store.auth;\n\nimport java.util.Map;\n\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\n\n@FeignClient(name = \"auth\", url = \"http://auth:8080\")\npublic interface AuthController {\n\n    @PostMapping(\"/auth/register\")\n    public ResponseEntity&lt;TokenOut&gt; register(\n        @RequestBody RegisterIn in\n    );\n\n    @PostMapping(\"/auth/login\")\n    public ResponseEntity&lt;TokenOut&gt; login(\n        @RequestBody LoginIn in\n    );\n\n    @PostMapping(\"/auth/solve\")\n    public ResponseEntity&lt;Map&lt;String, String&gt;&gt; solve(\n        @RequestBody TokenOut in\n    );\n\n}\n</code></pre> <pre><code>package store.auth;\n\nimport lombok.Builder;\n\n@Builder\npublic record LoginIn(\n    String email,\n    String password\n) {\n\n}\n</code></pre> <pre><code>package store.auth;\n\nimport lombok.Builder;\n\n@Builder\npublic record RegisterIn(\n    String name,\n    String email,\n    String password\n) {\n\n}\n</code></pre> <pre><code>package store.auth;\n\nimport lombok.Builder;\n\n@Builder\npublic record TokenOut (\n    String jwt\n) {\n\n}\n</code></pre> mvn clean install"},{"location":"auth/auth/#authservice","title":"auth.service","text":"<pre><code>\ud83d\udcc1 api/\n\u2514\u2500\u2500 \ud83d\udcc1 auth.service/\n    \u251c\u2500\u2500 \ud83d\udcc1 k8s/\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc4 k8s.yaml\n    \u251c\u2500\u2500 \ud83d\udcc1 src/\n    \u2502   \u251c\u2500\u2500 \ud83d\udcc1 main/\n    \u2502   \u2502   \u2514\u2500\u2500 \ud83d\udcc1 java/\n    \u2502   \u2502       \u2514\u2500\u2500 \ud83d\udcc1 store/\n    \u2502   \u2502           \u2514\u2500\u2500 \ud83d\udcc1 auth/\n    \u2502   \u2502               \u251c\u2500\u2500 \ud83d\udcc4 AuthApplication.java\n    \u2502   \u2502               \u251c\u2500\u2500 \ud83d\udcc4 AuthResource.java\n    \u2502   \u2502               \u251c\u2500\u2500 \ud83d\udcc4 AuthService.java\n    \u2502   \u2502               \u2514\u2500\u2500 \ud83d\udcc4 JwtService.java\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc1 resources/\n    \u2502       \u2514\u2500\u2500 \ud83d\udcc4 application.yaml\n    \u251c\u2500\u2500 \ud83d\udcc4 pom.xml\n    \u251c\u2500\u2500 \ud83d\udcc4 Dockerfile\n    \u2514\u2500\u2500 \ud83d\udcc4 Jenkinsfile\n</code></pre> Source pom.xmlDockerfileJenkinsfilek8s.yamlapplication.yamlAuthApplication.javaAuthResource.javaAuthService.javaJwtService.java <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;3.5.5&lt;/version&gt;\n        &lt;relativePath/&gt;\n    &lt;/parent&gt;\n\n    &lt;groupId&gt;store&lt;/groupId&gt;\n    &lt;artifactId&gt;auth-service&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt;\n\n    &lt;properties&gt;\n        &lt;java.version&gt;21&lt;/java.version&gt;\n        &lt;spring-cloud.version&gt;2025.0.0&lt;/spring-cloud.version&gt;\n        &lt;maven.compiler.proc&gt;full&lt;/maven.compiler.proc&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;\n            &lt;artifactId&gt;auth&lt;/artifactId&gt;\n            &lt;version&gt;${project.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;\n            &lt;artifactId&gt;account&lt;/artifactId&gt;\n            &lt;version&gt;${project.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt-api --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;\n            &lt;artifactId&gt;jjwt-api&lt;/artifactId&gt;\n            &lt;version&gt;[0.13,)&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;\n            &lt;artifactId&gt;jjwt-impl&lt;/artifactId&gt;\n            &lt;version&gt;[0.13,)&lt;/version&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;\n            &lt;artifactId&gt;jjwt-jackson&lt;/artifactId&gt; &lt;!-- or jjwt-gson if Gson is preferred --&gt;\n            &lt;version&gt;[0.13,)&lt;/version&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n\n    &lt;/dependencies&gt;\n\n    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n                &lt;version&gt;${spring-cloud.version}&lt;/version&gt;\n                &lt;type&gt;pom&lt;/type&gt;\n                &lt;scope&gt;import&lt;/scope&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n                &lt;configuration&gt;\n                    &lt;excludes&gt;\n                        &lt;exclude&gt;\n                            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n                            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n                        &lt;/exclude&gt;\n                    &lt;/excludes&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n\n&lt;/project&gt;\n</code></pre> <pre><code>FROM openjdk:25-slim\nVOLUME /tmp\nCOPY target/*.jar /app.jar\nENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]\n</code></pre> <pre><code>pipeline {\n    agent any\n    environment {\n        SERVICE = 'auth'\n        NAME = \"luigilopesz/${env.SERVICE}\"\n    }\n    stages {\n        stage('Dependecies') {\n            steps {\n                build job: 'auth', wait: true\n            }\n        }\n        stage('Build') { \n            steps {\n                sh 'mvn -B -DskipTests clean package'\n            }\n        }      \n        stage('Build &amp; Push Image') {\n            steps {\n                withCredentials([usernamePassword(\n                    credentialsId: 'dockerhub-credential',\n                    usernameVariable: 'USERNAME',\n                    passwordVariable: 'TOKEN')])\n                {\n                    sh \"docker login -u $USERNAME -p $TOKEN\"\n                    sh \"docker buildx create --use --platform=linux/arm64,linux/amd64 --node multi-platform-builder-${env.SERVICE} --name multi-platform-builder-${env.SERVICE}\"\n                    sh \"docker buildx build --platform=linux/arm64,linux/amd64 --push --tag ${env.NAME}:latest --tag ${env.NAME}:${env.BUILD_ID} -f Dockerfile .\"\n                    sh \"docker buildx rm --force multi-platform-builder-${env.SERVICE}\"\n                }\n            }\n        }\n    }\n}\n</code></pre> <pre><code>\n</code></pre> <pre><code>server:\n  port: 8080\n\nspring:\n  application:\n    name: auth\n\n  mvc:\n    problemdetails:\n      enabled: true\n\nstore:\n  jwt:\n    secretKey: ${JWT_SECRET_KEY:changeit}\n\nlogging:\n  level:\n    root: INFO\n    store: DEBUG\n</code></pre> <pre><code>package store.auth;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.openfeign.EnableFeignClients;\n\n@EnableFeignClients(basePackages = {\n    \"store.account\"\n})\n@SpringBootApplication\npublic class AuthApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(AuthApplication.class, args);\n    }\n\n}\n</code></pre> <pre><code>package store.auth;\n\nimport java.util.Map;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n\nimport store.account.AccountOut;\n\n@RestController\npublic class AuthResource implements AuthController {\n\n    @Autowired\n    private AuthService authService;\n\n    @Override\n    public ResponseEntity&lt;TokenOut&gt; register(RegisterIn in) {\n        final String jwt = authService.register(\n            in.name(), in.email(), in.password()\n        );\n        return ResponseEntity\n            .created(\n                ServletUriComponentsBuilder.fromCurrentRequest().build().toUri()\n            )\n            .body(TokenOut.builder().jwt(jwt).build());\n    }\n\n    @Override\n    public ResponseEntity&lt;TokenOut&gt; login(LoginIn in) {\n        final String jwt = authService.login(\n            in.email(),\n            in.password()\n        );\n        return ResponseEntity\n            .created(\n                ServletUriComponentsBuilder.fromCurrentRequest().build().toUri()\n            )\n            .body(TokenOut.builder().jwt(jwt).build());\n    }\n\n    @Override\n    public ResponseEntity&lt;Map&lt;String, String&gt;&gt; solve(TokenOut in) {\n        AccountOut account = authService.solve(in.jwt());\n        return ResponseEntity.ok(\n            Map.of(\n                \"idAccount\", account.id()\n            )\n        );\n    }\n\n}\n</code></pre> <pre><code>package store.auth;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.server.ResponseStatusException;\n\nimport store.account.AccountController;\nimport store.account.AccountIn;\nimport store.account.AccountOut;\n\n@Service\npublic class AuthService {\n\n    private Logger logger = LoggerFactory.getLogger(AuthService.class);\n\n    @Autowired\n    private AccountController accountController;\n\n    @Autowired\n    private JwtService jwtService;\n\n    public String register(String name, String email, String password) {\n\n        logger.debug(\n            String.format(\n                \"registrando uma conta: [%s] for [%s]\",\n                name, email\n            )\n        );\n\n        // Salvar no servico de Account\n        AccountOut account = accountController.create(AccountIn.builder()\n            .name(name)\n            .email(email)\n            .password(password)\n            .build()\n        ).getBody();\n\n        // Gera um token\n        String jwtString = jwtService.generate(account);\n\n        // Retorna o token\n        return jwtString;\n    }\n\n    public String login(String email, String password) {\n\n        logger.debug(String.format(\"required login for %s:%s\", email, password));\n\n        // Verify credentials\n        ResponseEntity&lt;AccountOut&gt; response = accountController.findByEmailAndPassword(\n            AccountIn.builder()\n                .email(email)\n                .password(password)\n                .build()\n        );\n        if (!response.hasBody()) {\n            logger.debug(String.format(\"user not found\"));\n            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED);\n        }\n\n        AccountOut account = response.getBody();\n        logger.debug(String.format(\"found user\", account));\n\n        // generate token\n        return jwtService.generate(account);\n    }\n\n    public AccountOut solve(String jwt) {\n        return AccountOut.builder()\n            .id(jwtService.getId(jwt))\n            .build();\n    }\n\n}\n</code></pre> <pre><code>package store.auth;\n\nimport java.util.Date;\nimport java.util.Map;\n\nimport javax.crypto.SecretKey;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.server.ResponseStatusException;\n\nimport io.jsonwebtoken.Claims;\nimport io.jsonwebtoken.JwtParser;\nimport io.jsonwebtoken.Jwts;\nimport io.jsonwebtoken.io.Decoders;\nimport io.jsonwebtoken.security.Keys;\nimport store.account.AccountOut;\n\n@Service\npublic class JwtService {\n\n    @Value(\"${store.jwt.secretKey}\")\n    private String secretKey;\n\n    public String generate(AccountOut account) {\n\n        Date now = new Date();\n\n        String jwt = Jwts.builder()\n            .header()\n            .and()\n            .id(account.id())\n            .issuer(\"Insper::PMA\")\n            .claims(Map.of(\n                \"email\", account.email()\n            ))\n            .signWith(getKey())\n            .subject(account.name())\n            .notBefore(now)\n            .expiration(new Date(now.getTime() + 1000 * 60 * 120)) // em milisegundos\n            .compact();\n        return jwt;\n\n    }\n\n    public String getId(String jwt) {\n        // constroe o parser\n        JwtParser parser = Jwts.parser().verifyWith(getKey()).build();\n        // recupero os atributos\n        Claims claims = parser.parseSignedClaims(jwt).getPayload();\n        Date now = new Date();\n        if (claims.getNotBefore().after(now)) {\n            throw new ResponseStatusException(\n                HttpStatus.UNAUTHORIZED,\n                \"Token is not valid yet!\"\n            );\n        }\n        if (claims.getExpiration().before(now)) {\n            throw new ResponseStatusException(\n                HttpStatus.UNAUTHORIZED,\n                \"Token is expired!\"\n            );\n        }\n        return claims.getId();\n    }\n\n    private SecretKey getKey() {\n        return Keys.hmacShaKeyFor(Decoders.BASE64.decode(secretKey));\n    }\n\n}\n</code></pre> mvn clean package spring-boot:run"},{"location":"exchange/exchange/","title":"6. Exchange API","text":""},{"location":"exchange/exchange/#exchange-api","title":"Exchange API","text":"<p>A Exchange API fornece servi\u00e7os de convers\u00e3o de moedas para o dom\u00ednio <code>store</code>. Ela permite consultar a taxa de c\u00e2mbio entre duas moedas (<code>from_curr</code> \u2192 <code>to_curr</code>), aplicando automaticamente o spread configurado e vinculando a opera\u00e7\u00e3o ao usu\u00e1rio autenticado.</p> <p>Trusted layer e seguran\u00e7a</p> <p>Toda requisi\u00e7\u00e3o externa entra pelo gateway. As rotas <code>/exchange/**</code> s\u00e3o protegidas: \u00e9 obrigat\u00f3rio enviar <code>Authorization: Bearer &lt;jwt&gt;</code>.</p>"},{"location":"exchange/exchange/#visao-geral","title":"Vis\u00e3o geral","text":"<ul> <li>Service (<code>exchange.service</code>): Microservi\u00e7o em FastAPI (Python) que consulta um provedor externo de c\u00e2mbio (HTTP), aplica um spread configur\u00e1vel e retorna as cota\u00e7\u00f5es.</li> </ul> <pre><code>classDiagram\n    class ExchangeService {\n        +getExchange(from: String, to: String): QuoteOut\n    }\n\n    class QuoteOut {\n        -Double sell\n        -Double buy\n        -String date\n        -String idAccount\n    }</code></pre>"},{"location":"exchange/exchange/#estrutura-da-requisicao","title":"Estrutura da requisi\u00e7\u00e3o","text":"<pre><code>flowchart LR\n    subgraph api [Trusted Layer]\n        direction TB\n        gateway --&gt; account\n        gateway --&gt; auth\n        account --&gt; db@{ shape: cyl, label: \"Database\" }\n        auth --&gt; account\n        gateway e1 @==&gt;|\"\"| exchange:::red\n        gateway --&gt; product\n        gateway --&gt; order\n        product --&gt; db\n        order --&gt; db\n        order --&gt; product\n    end\n    exchange e3@==&gt;|\"\"| 3partyapi:::green@{label: \"3rd-party API\"}\n    internet e2@==&gt;|request| gateway\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e3@{ animate: true }\n    classDef red fill:#fcc\n    classDef green fill:#cfc\n    click product \"#product-api\" \"Product API\"</code></pre>"},{"location":"exchange/exchange/#exchangeservice","title":"exchange.service","text":"<pre><code>\ud83d\udcc1 api/\n\u2514\u2500\u2500 \ud83d\udcc1 exchange.service/\n    \u251c\u2500\u2500 \ud83d\udcc1 app/\n    \u2502   \u251c\u2500\u2500 \ud83d\udcc4 __init__.py\n    \u2502   \u251c\u2500\u2500 \ud83d\udcc4 main.py\n    \u2502   \u251c\u2500\u2500 \ud83d\udcc4 auth.py\n    \u2502   \u251c\u2500\u2500 \ud83d\udcc4 config.py\n    \u2502   \u251c\u2500\u2500 \ud83d\udcc4 models.py\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc1 clients/\n    \u2502       \u251c\u2500\u2500 \ud83d\udcc4 __init__.py\n    \u2502       \u2514\u2500\u2500 \ud83d\udcc4 rates.py\n    \u251c\u2500\u2500 \ud83d\udcc4 requirements.txt\n    \u2514\u2500\u2500 \ud83d\udcc4 Dockerfile\n</code></pre> Source requirements.txtDockerfilemain.pyauth.pyconfig.pymodels.pyclients/rates.py <pre><code>fastapi\nuvicorn\nhttpx\npyjwt\npydantic-settings\n</code></pre> <pre><code>FROM python:3.12-slim\n\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY app ./app\n\nENV EXCHANGE_PORT=8080\nEXPOSE 8080\n\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8080\"]\n</code></pre> <pre><code>from fastapi import FastAPI, Depends, HTTPException\nfrom .auth import require_auth\nfrom .rates import get_exchange_rate\nfrom .models import ExchangeResponse, ErrorResponse\nfrom .config import settings\n\napp = FastAPI(title=\"Exchange Service\", version=\"1.0.0\")\n\n\n@app.get(\n    \"/exchange/{base}/{target}\",\n    response_model=ExchangeResponse,\n    responses={\n        400: {\n            \"model\": ErrorResponse\n        },\n        401: {\n            \"model\": ErrorResponse\n        }\n    },\n)\nasync def exchange_rate(base: str,\n                        target: str,\n                        account_id: str = Depends(require_auth)):\n    rate_data = await get_exchange_rate(base, target)\n\n    if not rate_data:\n        raise HTTPException(status_code=400,\n                            detail=f\"Invalid currency pair {base}/{target}\")\n\n    return rate_data\n</code></pre> <pre><code>import jwt\nfrom fastapi import Header, HTTPException\nfrom .config import settings\n\n\ndef require_auth(authorization: str = Header(None)) -&gt; str:\n    if not authorization or not authorization.startswith(\"Bearer \"):\n        raise HTTPException(status_code=401,\n                            detail=\"Missing Authorization header\")\n\n    token = authorization.split(\" \")[1]\n    try:\n        if settings.jwt_secret:\n            payload = jwt.decode(token,\n                                 settings.jwt_secret,\n                                 algorithms=[settings.jwt_algorithm])\n        else:\n            # decodifica sem validar assinatura se n\u00c3\u00a3o houver chave definida\n            payload = jwt.decode(token, options={\"verify_signature\": False})\n\n        account_id = (payload.get(\"id-account\") or payload.get(\"account_id\")\n                      or payload.get(\"sub\") or payload.get(\"id\"))\n        if not account_id:\n            raise HTTPException(status_code=401,\n                                detail=\"Invalid token payload\")\n\n        return account_id\n\n    except jwt.ExpiredSignatureError:\n        raise HTTPException(status_code=401, detail=\"Token expired\")\n    except jwt.InvalidTokenError:\n        raise HTTPException(status_code=401, detail=\"Invalid or expired token\")\n</code></pre> <pre><code>from pydantic_settings import BaseSettings\n\n\nclass Settings(BaseSettings):\n    port: int = 8083\n\n    rates_base_url: str = \"https://api.exchangerate.host\"\n\n    spread: float = 0.02\n\n    jwt_secret: str | None = None\n    jwt_public_key: str | None = None\n    jwt_algorithm: str = \"HS256\"\n\n    class Config:\n        env_prefix = \"EXCHANGE_\"\n        env_file = \".env\"\n\n\nsettings = Settings()\n</code></pre> <pre><code>from pydantic import BaseModel\n\n\nclass ExchangeResponse(BaseModel):\n    base: str\n    target: str\n    rate: float\n    buy: float\n    sell: float\n\n\nclass ErrorResponse(BaseModel):\n    detail: str\n</code></pre> <pre><code>\n</code></pre>"},{"location":"gateway/gateway/","title":"3. Gateway API","text":""},{"location":"gateway/gateway/#gateway-api","title":"Gateway API","text":"<p>A Gateway API atua como ponto \u00fanico de entrada para todos os microservi\u00e7os do dom\u00ednio <code>store</code>. Ela \u00e9 respons\u00e1vel por rotear, autenticar e auditar requisi\u00e7\u00f5es externas, aplicando pol\u00edticas de seguran\u00e7a e balanceando o tr\u00e1fego entre os servi\u00e7os internos.</p> <p>Trusted layer e seguran\u00e7a</p> <p>Toda requisi\u00e7\u00e3o externa entra exclusivamente pelo Gateway. O Gateway valida o JWT, injeta o <code>id-account</code> nos headers e redireciona a requisi\u00e7\u00e3o para o microservi\u00e7o correspondente (account, auth, order, product, exchange etc.).  </p>"},{"location":"gateway/gateway/#visao-geral","title":"Vis\u00e3o geral","text":"<ul> <li> <p>Service (<code>gateway.service</code>): Implementado em Spring Cloud Gateway (Java).   Centraliza o roteamento HTTP para os demais microservi\u00e7os (<code>account</code>, <code>auth</code>, <code>order</code>, <code>product</code>, <code>exchange</code>).   Aplica as regras de seguran\u00e7a via filtros customizados e valida\u00e7\u00e3o de tokens JWT.  </p> </li> <li> <p>Seguran\u00e7a e Autoriza\u00e7\u00e3o   Toda requisi\u00e7\u00e3o passa por <code>AuthorizationFilter</code>, que valida o JWT e injeta o header <code>id-account</code> antes do encaminhamento ao destino.   O <code>RouterValidator</code> define quais rotas exigem autentica\u00e7\u00e3o.   O <code>CorsFilter</code> habilita o compartilhamento seguro entre dom\u00ednios (CORS).</p> </li> </ul> <pre><code>classDiagram\n    class GatewayApplication {\n        +main(String[] args)\n    }\n\n    class GatewayResource {\n        +healthCheck(): String\n    }\n\n    class AuthorizationFilter {\n        +filter(exchange, chain): Mono&lt;Void&gt;\n        -isSecured(request): boolean\n        -validateToken(token): Claims\n        -injectHeaders(request, claims)\n    }\n\n    class RouterValidator {\n        +isSecured(request): boolean\n    }\n\n    class CorsFilter {\n        +filter(exchange, chain): Mono&lt;Void&gt;\n    }\n\n    GatewayApplication --&gt; GatewayResource\n    GatewayResource --&gt; AuthorizationFilter\n    GatewayApplication --&gt; RouterValidator\n    GatewayApplication --&gt; CorsFilter\n\n    note for AuthorizationFilter \"Valida o JWT e injeta o header id-account\"\n    note for RouterValidator \"Define rotas seguras / p\u00fablicas\"\n    note for CorsFilter \"Habilita o CORS para o dom\u00ednio store\"</code></pre>"},{"location":"gateway/gateway/#estrutura-da-requisicao","title":"Estrutura da requisi\u00e7\u00e3o","text":"<pre><code>flowchart LR\n    subgraph api [Trusted Layer]\n        direction TB\n        gateway e2 @==&gt;|\"\"| account\n        gateway e4 @==&gt;|\"\"| others\n        account --&gt; db@{ shape: cyl, label: \"Database\" }\n        others --&gt; db\n    end\n    internet e1@==&gt;|request| gateway:::red\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e4@{ animate: true }\n    classDef red fill:#fcc</code></pre>"},{"location":"gateway/gateway/#gatewayservice","title":"gateway.service","text":"<pre><code>\ud83d\udcc1 api\n\u2514\u2500\u2500 \ud83d\udcc1 gateway.service/\n    \u251c\u2500\u2500 \ud83d\udcc1 k8s/\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc4 k8s.yaml\n    \u251c\u2500\u2500 \ud83d\udcc1 src/\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc1 main/\n    \u2502       \u251c\u2500\u2500 \ud83d\udcc1 java/\n    \u2502       \u2502   \u2514\u2500\u2500 \ud83d\udcc1 store/\n    \u2502       \u2502       \u2514\u2500\u2500 \ud83d\udcc1 gateway/\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 GatewayApplication.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 GatewayResource.java\n    \u2502       \u2502           \u2514\u2500\u2500 \ud83d\udcc1 security\n    \u2502       \u2502               \u251c\u2500\u2500 \ud83d\udcc4 CorsFilter.java\n    \u2502       \u2502               \u251c\u2500\u2500 \ud83d\udcc4 AuthorizationFilter.java\n    \u2502       \u2502               \u2514\u2500\u2500 \ud83d\udcc4 RouterValidator.java\n    \u2502       \u2514\u2500\u2500 \ud83d\udcc1 resources/\n    \u2502           \u2514\u2500\u2500 \ud83d\udcc4 application.yaml\n    \u251c\u2500\u2500 \ud83d\udcc4 pom.xml\n    \u251c\u2500\u2500 \ud83d\udcc4 Dockerfile\n    \u2514\u2500\u2500 \ud83d\udcc4 Jenkinsfile\n</code></pre> Source pom.xmlDockerfileJenkinsfilek8s.yamlapplication.yamlGatewayApplication.javaGatewayResource.javaCorsFilter.javaAuthorizationFilter.javaRouterValidator.java <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;3.5.5&lt;/version&gt;\n        &lt;relativePath /&gt; &lt;!-- lookup parent from repository --&gt;\n    &lt;/parent&gt;\n    &lt;groupId&gt;store&lt;/groupId&gt;\n    &lt;artifactId&gt;gateway-service&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt;\n    &lt;properties&gt;\n        &lt;java.version&gt;21&lt;/java.version&gt;\n        &lt;spring-cloud.version&gt;2025.0.0&lt;/spring-cloud.version&gt;\n        &lt;maven.compiler.proc&gt;full&lt;/maven.compiler.proc&gt;\n    &lt;/properties&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-gateway-server-webflux&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n\n    &lt;/dependencies&gt;\n\n    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n                &lt;version&gt;${spring-cloud.version}&lt;/version&gt;\n                &lt;type&gt;pom&lt;/type&gt;\n                &lt;scope&gt;import&lt;/scope&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n                &lt;configuration&gt;\n                    &lt;excludes&gt;\n                        &lt;exclude&gt;\n                            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n                            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n                        &lt;/exclude&gt;\n                    &lt;/excludes&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n\n&lt;/project&gt;\n</code></pre> <pre><code>FROM openjdk:23-slim\nVOLUME /tmp\nCOPY target/*.jar app.jar\nENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]\n</code></pre> <pre><code>pipeline {\n    agent any\n    environment {\n        SERVICE = 'gateway'\n        NAME = \"luigilopesz/${env.SERVICE}\"\n    }\n    stages {\n        stage('Build') { \n            steps {\n                sh 'mvn -B -DskipTests clean package'\n            }\n        }      \n        stage('Build &amp; Push Image') {\n            steps {\n                withCredentials([usernamePassword(\n                    credentialsId: 'dockerhub-credential',\n                    usernameVariable: 'USERNAME',\n                    passwordVariable: 'TOKEN')])\n                {\n                    sh \"docker login -u $USERNAME -p $TOKEN\"\n                    sh \"docker buildx create --use --platform=linux/arm64,linux/amd64 --node multi-platform-builder-${env.SERVICE} --name multi-platform-builder-${env.SERVICE}\"\n                    sh \"docker buildx build --platform=linux/arm64,linux/amd64 --push --tag ${env.NAME}:latest --tag ${env.NAME}:${env.BUILD_ID} -f Dockerfile .\"\n                    sh \"docker buildx rm --force multi-platform-builder-${env.SERVICE}\"\n                }\n            }\n        }\n    }\n}\n</code></pre> <pre><code>\n</code></pre> <pre><code>\n</code></pre> <pre><code>package store.gateway;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class GatewayApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(GatewayApplication.class, args);\n    }\n\n}\n</code></pre> <pre><code>package store.gateway;\n\nimport java.util.Map;\n\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n\n@RestController\npublic class GatewayResource {\n\n    @GetMapping(\"/health-check\")\n    public ResponseEntity&lt;Map&lt;String, String&gt;&gt; healthCheck() {\n        return ResponseEntity.ok()\n            .body(Map.of(\n                \"osArch\", System.getProperty(\"os.arch\"),\n                \"osName\", System.getProperty(\"os.name\"),\n                \"osVersision\", System.getProperty(\"os.version\")\n            ));\n    }\n\n    @GetMapping(\"/\")\n    public ResponseEntity&lt;String&gt; hello() {\n        return ResponseEntity.ok()\n            .body(\"API for Store\");\n    }\n\n}\n</code></pre> <pre><code>package store.gateway.security;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.reactive.CorsWebFilter;\nimport org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource;\n\n@Configuration\npublic class CorsFilter {\n\n    @Bean\n    public CorsWebFilter corsWebFilter() {\n        CorsConfiguration corsConfig = new CorsConfiguration();\n        corsConfig.setAllowCredentials(false);\n        corsConfig.addAllowedMethod(\"*\");\n        corsConfig.addAllowedOrigin(\"*\");\n        corsConfig.addAllowedHeader(\"*\");\n\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        source.registerCorsConfiguration(\"/**\", corsConfig);\n\n        return new CorsWebFilter(source);\n    }\n\n}\n</code></pre> <pre><code>package store.gateway.security;\n\nimport java.util.Map;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.cloud.gateway.filter.GatewayFilterChain;\nimport org.springframework.cloud.gateway.filter.GlobalFilter;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.server.reactive.ServerHttpRequest;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.reactive.function.client.WebClient;\nimport org.springframework.web.server.ResponseStatusException;\nimport org.springframework.web.server.ServerWebExchange;\n\nimport reactor.core.publisher.Mono;\n\n@Component\npublic class AuthorizationFilter implements GlobalFilter {\n\n    private Logger logger = LoggerFactory.getLogger(AuthorizationFilter.class);\n    private static final String AUTHORIZATION_HEADER = \"Authorization\";\n    private static final String AUTHORIZATION_BEARER_HEADER = \"Bearer\";\n    private static final String AUTH_SERVICE_TOKEN_SOLVE = \"http://auth:8080/auth/solve\";\n\n    @Autowired\n    private RouterValidator routerValidator;\n\n    @Autowired\n    private WebClient.Builder webClient;\n\n    @Override\n    public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n        logger.debug(\"filter: entrou no filtro de autorizacao\");\n        ServerHttpRequest request = exchange.getRequest();\n\n        if (!routerValidator.isSecured.test(request)) {\n            logger.debug(\"filter: rota nao eh segura\");\n            return chain.filter(exchange);\n        }\n        logger.debug(\"filter: rota eh segura\");\n\n        if (!isAuthMissing(request)) {\n            logger.debug(\"filter: tem [Authorization] no Header\");\n            String authorization = request.getHeaders().get(AUTHORIZATION_HEADER).get(0);\n            logger.debug(String.format(\n                \"filter: [Authorization]=[%s]\",\n                authorization\n            ));\n            String[] parts = authorization.split(\" \");\n            if (parts.length != 2) {\n                logger.debug(\"filter: bearer token is invalid\");\n                throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, \"Authorization header is not well formatted\");\n            }\n            if (!AUTHORIZATION_BEARER_HEADER.equals(parts[0])) {\n                logger.debug(\"filter: bearer token is invalid\");\n                throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, \"Authorization header is not well formatted\");\n            }\n            logger.debug(\"filter: bearer token is formatted\");\n\n            final String jwt = parts[1];\n\n            return requestAuthTokenSolve(exchange, chain, jwt);\n\n        }\n        logger.debug(\"filter: access is denied!\");\n        // if access is denied\n        throw new ResponseStatusException(HttpStatus.UNAUTHORIZED);\n    }\n\n    private boolean isAuthMissing(ServerHttpRequest request) {\n        return !request.getHeaders().containsKey(AUTHORIZATION_HEADER);\n    }\n\n    // este metodo eh responsavel por enviar o token ao Auth Microservice\n    // a fim de interpretar o token, a chamada eh feita via Rest.\n    private Mono&lt;Void&gt; requestAuthTokenSolve(ServerWebExchange exchange, GatewayFilterChain chain, String jwt) {\n        logger.debug(\"solve: solving jwt: \" + jwt);\n        return webClient\n            .defaultHeader(\n                HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE\n            )\n            .build()\n            .post()\n            .uri(AUTH_SERVICE_TOKEN_SOLVE)\n            .bodyValue(Map.of(\n                \"jwt\", jwt)\n            )\n            .retrieve()\n            .toEntity(Map.class)\n            .flatMap(response -&gt; {\n                if (response != null &amp;&amp; response.hasBody() &amp;&amp; response.getBody() != null) {\n                    final Map&lt;String, String&gt; map = response.getBody();\n                    String idAccount = map.get(\"idAccount\");\n                    logger.debug(\"solve: id account: \" + idAccount);\n                    ServerWebExchange authorizated = updateRequest(exchange, idAccount);\n                    return chain.filter(authorizated);\n                } else {\n                    throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, \"Invalid token\");\n                }\n            });\n    }\n\n    private ServerWebExchange updateRequest(ServerWebExchange exchange, String idAccount) {\n        logger.debug(\"original headers: \" + exchange.getRequest().getHeaders().toString());\n        ServerWebExchange modified = exchange.mutate()\n            .request(\n                exchange.getRequest()\n                    .mutate()\n                    .header(\"id-account\", idAccount)\n                    .build()\n            ).build();\n        logger.debug(\"updated headers: \" + modified.getRequest().getHeaders().toString());\n        return modified;\n    }    \n\n}\n</code></pre> <pre><code>package store.gateway.security;\n\nimport java.util.List;\nimport java.util.function.Predicate;\n\nimport org.springframework.http.server.reactive.ServerHttpRequest;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class RouterValidator {\n\n        private List&lt;String&gt; openApiEndpoints = List.of(\n                \"POST /auth/register\",\n                \"POST /auth/login\"\n        );\n\n        public Predicate&lt;ServerHttpRequest&gt; isSecured =\n                request -&gt; openApiEndpoints\n                        .stream()\n                        .noneMatch(uri -&gt; {\n                                String[] parts = uri.replaceAll(\"[^a-zA-Z0-9// *]\", \"\").split(\" \");\n                                final String method = parts[0];\n                                final String path = parts[1];\n                                final boolean deep = path.endsWith(\"/**\");\n                                return (\"ANY\".equalsIgnoreCase(method) || request.getMethod().toString().equalsIgnoreCase(method))\n                                        &amp;&amp; (request.getURI().getPath().equals(path) || (deep &amp;&amp; request.getURI().getPath().startsWith(path.replace(\"/**\", \"\"))));\n                        });\n\n}\n</code></pre> mvn clean package spring-boot:run"},{"location":"jenkins/Jenkins/","title":"Jenkins CI/CD \u2013 Store Project","text":""},{"location":"jenkins/Jenkins/#jenkins-cicd-store-project","title":"Jenkins CI/CD \u2013 Store Project","text":"<p>A esteira de CI/CD do dom\u00ednio <code>store</code> \u00e9 orquestrada pelo Jenkins. Existem dois tipos de pipelines:</p> <p>1) Interfaces (<code>account</code>, <code>auth</code>, <code>product</code>, <code>order</code>):    - Empacotam artefatos/contratos usados por outros m\u00f3dulos.    - N\u00e3o publicam imagem Docker.    - Passos: <code>mvn -B -DskipTests clean install</code>.</p> <p>2) Servi\u00e7os (<code>account.service</code>, <code>auth.service</code>, <code>product.service</code>, <code>order.service</code>, <code>gateway.service</code>, <code>exchange.service</code>):    - Build Java ou Python (conforme o servi\u00e7o).    - Build &amp; push de imagem Docker (multi-arch) para o Docker Hub.    - Podem acionar jobs de depend\u00eancia (ex.: compilar a interface antes).</p>"},{"location":"jenkins/Jenkins/#status-atual-dos-pipelines","title":"Status atual dos pipelines","text":"<p>A captura abaixo mostra o painel do Jenkins com os \u00faltimos runs de todas as pipelines ativas:</p> <p></p>"},{"location":"jenkins/Jenkins/#padroes-de-pipeline","title":"Padr\u00f5es de pipeline","text":""},{"location":"jenkins/Jenkins/#1-interfaces-apenas-build-maven","title":"1) Interfaces \u2013 apenas build Maven","text":"<pre><code>pipeline {\n    agent any\n\n    stages {\n        stage('Build') {\n            steps {\n                sh 'mvn -B -DskipTests clean install'\n            }\n        }\n    }\n}\n</code></pre> <p>Objetivo: disponibilizar artefatos (JARs) para que os servi\u00e7os possam compilar contra as \u00faltimas mudan\u00e7as de contrato/DTOs.</p>"},{"location":"jenkins/Jenkins/#2-servicos-build-dependencias-e-imagem-docker","title":"2) Servi\u00e7os \u2013 build, depend\u00eancias e imagem Docker","text":"<pre><code>pipeline {\n    agent any\n    environment {\n        SERVICE = &lt;nome_servi\u00e7o&gt;            // nome l\u00f3gico do servi\u00e7o\n        NAME = \"microservices-architecture-example/${env.SERVICE}\"   // reposit\u00f3rio de imagem no Docker Hub\n    }\n    stages {\n        stage('Dependecies') {\n            steps {\n                // dispara o job da interface correspondente e aguarda concluir\n                build job: &lt;nome_interface&gt;, wait: true\n            }\n        }\n        stage('Build') { \n            steps {\n                sh 'mvn -B -DskipTests clean package'\n            }\n        }      \n        stage('Build &amp; Push Image') {\n            steps {\n                withCredentials([usernamePassword(\n                    credentialsId: 'dockerhub-credential',\n                    usernameVariable: 'USERNAME',\n                    passwordVariable: 'TOKEN')]) {\n                    sh \"docker login -u $USERNAME -p $TOKEN\"\n\n                    // builder multi-arch ef\u00eamero\n                    sh \"docker buildx create --use --platform=linux/arm64,linux/amd64 --node multi-platform-builder-${env.SERVICE} --name multi-platform-builder-${env.SERVICE}\"\n\n                    // build + push tags :latest e :BUILD_ID\n                    sh \"docker buildx build --platform=linux/arm64,linux/amd64 --push --tag ${env.NAME}:latest --tag ${env.NAME}:${env.BUILD_ID} -f Dockerfile .\"\n\n                    // limpeza do builder\n                    sh \"docker buildx rm --force multi-platform-builder-${env.SERVICE}\"\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>Objetivo: gerar imagem Docker pronta para deploy (multi-arch), com versionamento por <code>BUILD_ID</code> e tag <code>latest</code>.</p>"},{"location":"jenkins/Jenkins/#fluxo-resumido","title":"Fluxo resumido","text":"<pre><code>flowchart TB\n    subgraph Jenkins\n        I[Job Interface\\nmvn clean install] --&gt;|artefato| S[Job Servi\u00e7o\\nmvn package]\n        S --&gt; D[Buildx: build &amp; push Docker\\n:latest e :BUILD_ID]\n    end\n    D --&gt; REG[(Docker Hub)]</code></pre>"},{"location":"jenkins/Jenkins/#localizacao-dos-jenkinsfiles","title":"Localiza\u00e7\u00e3o dos Jenkinsfiles","text":"<p>Os <code>Jenkinsfile</code> de cada componente est\u00e3o nas documenta\u00e7\u00f5es das respectivas APIs: </p> Componente Documenta\u00e7\u00e3o Account (interface) Account API Account.service Account API Auth (interface) Auth API Auth.service Auth API Gateway.service Gateway API Product (interface) Product API Product.service Product API Order (interface) Order API Order.service Order API Exchange.service Exchange API <p>Cada p\u00e1gina detalha o <code>Jenkinsfile</code> correspondente via bloco Source.</p>"},{"location":"jenkins/Jenkins/#notas-operacionais","title":"Notas operacionais","text":"<ul> <li>Credenciais: o push de imagens usa o secret <code>dockerhub-credential</code> (usu\u00e1rio/senha).  </li> <li>Multi-arch: as imagens s\u00e3o publicadas para <code>linux/amd64</code> e <code>linux/arm64</code> via <code>buildx</code>.  </li> <li>Depend\u00eancias: servi\u00e7os disparam o job da interface para garantir que compilam contra a vers\u00e3o mais recente dos contratos.  </li> </ul> <p>\u2705 Este documento confirma que todos os pipelines necess\u00e1rios est\u00e3o configurados e operando conforme o desenho do projeto: interfaces compilam artefatos; servi\u00e7os geram e publicam imagens Docker.</p>"},{"location":"order/order/","title":"5. Order API","text":""},{"location":"order/order/#order-api","title":"Order API","text":"<p>A Order API gerencia os pedidos do dom\u00ednio <code>store</code>, permitindo criar e consultar ordens associadas ao usu\u00e1rio autenticado. Ela segue o padr\u00e3o adotado no projeto: interface (<code>order</code>) e service (<code>order.service</code>) atr\u00e1s do gateway e protegidos por JWT.</p> <p>Trusted layer e seguran\u00e7a</p> <p>Toda requisi\u00e7\u00e3o externa entra pelo gateway. As rotas <code>/order/**</code> s\u00e3o protegidas: \u00e9 obrigat\u00f3rio enviar <code>Authorization: Bearer &lt;jwt&gt;</code>.</p>"},{"location":"order/order/#visao-geral","title":"Vis\u00e3o geral","text":"<ul> <li>Interface (<code>order</code>): define o contrato (DTOs e Feign) consumido por outros m\u00f3dulos/fronts.  </li> <li>Service (<code>order.service</code>): implementa\u00e7\u00e3o REST, regras de neg\u00f3cio, persist\u00eancia (JPA), e migra\u00e7\u00f5es (Flyway).  </li> </ul> <pre><code>classDiagram\n    namespace order {\n        class OrderController {\n            +create(OrderIn orderIn): OrderOut\n            +findAll(): List&lt;OrderOut&gt;\n            +findById(String id): OrderOut\n        }\n\n        class OrderIn {\n            -List&lt;OrderItemIn&gt; items\n        }\n\n        class OrderItemIn {\n            -String idProduct\n            -int quantity\n        }\n\n        class OrderOut {\n            -String id\n            -String date\n            -List&lt;OrderItemOut&gt; items\n            -Double total\n        }\n\n        class OrderItemOut {\n            -String id\n            -ProductOut product\n            -int quantity\n            -Double total\n        }\n    }\n    namespace order.service {\n        class OrderResource {\n            +create(OrderIn orderIn): OrderOut\n            +findAll(): List&lt;OrderOut&gt;\n            +findById(String id): OrderOut\n        }\n\n        class OrderService {\n            +create(OrderIn orderIn): OrderOut\n            +findAll(): List&lt;OrderOut&gt;\n            +findById(String id): OrderOut\n        }\n\n        class OrderRepository {\n            +save(Order order): Order\n            +findAll(): List&lt;Order&gt;\n            +findById(String id): Optional&lt;Order&gt;\n        }\n\n        class Order {\n            -String id\n            -String date\n            -List~OrderItem~ items\n        }\n\n        class OrderItem {\n            -String id\n            -String idProduct\n            -int quantity\n            -Double total\n        }\n\n        class OrderModel {\n            +toEntity(OrderIn orderIn): Order\n            +toOut(Order order): OrderOut\n        }\n    }\n    &lt;&lt;Interface&gt;&gt; OrderController\n    OrderController ..&gt; OrderIn\n    OrderController ..&gt; OrderOut\n\n    &lt;&lt;Interface&gt;&gt; OrderRepository\n    OrderController &lt;|-- OrderResource\n    OrderResource *-- OrderService\n    OrderService *-- OrderRepository\n    OrderService ..&gt; Order\n    OrderService ..&gt; OrderModel\n    OrderRepository ..&gt; Order\n    Order ..&gt; OrderItem\n    OrderOut ..&gt; OrderItemOut\n    OrderItemOut ..&gt; ProductOut</code></pre>"},{"location":"order/order/#estrutura-da-requisicao","title":"Estrutura da requisi\u00e7\u00e3o","text":"<pre><code>flowchart LR\n    subgraph api [Trusted Layer]\n        direction TB\n        gateway --&gt; account\n        gateway --&gt; auth\n        account --&gt; db@{ shape: cyl, label: \"Database\" }\n        auth --&gt; account\n        gateway --&gt; product\n        gateway e6@==&gt;|\"\"| order:::red\n        product --&gt; db\n        order e3@==&gt;|\"\"| db\n        order e4@==&gt;|\"\"| product\n    end\n    internet e1@==&gt;|request| gateway\n    e1@{ animate: true }\n    e3@{ animate: true }\n    e4@{ animate: true }\n    e6@{ animate: true }\n    classDef red fill:#fcc\n    click order \"#order-api\" \"Order API\"</code></pre>"},{"location":"order/order/#order","title":"Order","text":"<pre><code>\ud83d\udcc1 api/\n\u2514\u2500\u2500 \ud83d\udcc1 order/\n    \u251c\u2500\u2500 \ud83d\udcc1 src/\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc1 main/\n    \u2502       \u2514\u2500\u2500 \ud83d\udcc1 java/\n    \u2502           \u2514\u2500\u2500 \ud83d\udcc1 store/\n    \u2502               \u2514\u2500\u2500 \ud83d\udcc1 order/\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 OrderController.java\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 OrderIn.java\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 OrderOut.java\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 OrderItemIn.java\n    \u2502                   \u2514\u2500\u2500 \ud83d\udcc4 OrderItemOut.java\n    \u251c\u2500\u2500 \ud83d\udcc4 pom.xml\n    \u2514\u2500\u2500 \ud83d\udcc4 Jenkinsfile\n</code></pre> Source pom.xmlJenkinsfileOrderController.javaOrderIn.javaOrderOut.javaOrderItemIn.javaOrderItemOut.java <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;3.5.5&lt;/version&gt;\n        &lt;relativePath/&gt;\n    &lt;/parent&gt;\n\n    &lt;groupId&gt;store&lt;/groupId&gt;\n    &lt;artifactId&gt;order&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt;\n\n    &lt;properties&gt;\n        &lt;java.version&gt;21&lt;/java.version&gt;\n        &lt;spring-cloud.version&gt;2025.0.0&lt;/spring-cloud.version&gt;\n        &lt;maven.compiler.proc&gt;full&lt;/maven.compiler.proc&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;\n            &lt;artifactId&gt;product&lt;/artifactId&gt;\n            &lt;version&gt;${project.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n                &lt;version&gt;${spring-cloud.version}&lt;/version&gt;\n                &lt;type&gt;pom&lt;/type&gt;\n                &lt;scope&gt;import&lt;/scope&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n\n&lt;/project&gt;\n</code></pre> <pre><code>pipeline {\n    agent any\n\n    stages {\n        stage('Build') {\n            steps {\n                sh 'mvn -B -DskipTests clean install'\n            }\n        }\n    }\n\n}\n</code></pre> <pre><code>package store.order;\n\nimport java.util.List;\n\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestHeader;\n\n@FeignClient(name = \"order\", url = \"http://order:8080\")\npublic interface OrderController {\n\n    @PostMapping(\"/order\")\n    public ResponseEntity&lt;OrderOut&gt; create(\n        @RequestHeader(\"id-account\") String accountId,\n        @RequestBody OrderIn in\n    );\n\n    @GetMapping(\"/order/{id}\")\n    public ResponseEntity&lt;OrderOut&gt; findById(\n        @RequestHeader(\"id-account\") String accountId,\n        @PathVariable(\"id\") String id\n    );\n\n    @GetMapping(\"/order\")\n    public ResponseEntity&lt;List&lt;OrderOut&gt;&gt; findAll(\n        @RequestHeader(\"id-account\") String accountId\n    );\n\n}\n</code></pre> <pre><code>package store.order;\n\nimport java.util.List;\n\nimport lombok.Builder;\n\n@Builder\npublic record OrderIn(\n    List&lt;ItemIn&gt; items\n) {\n\n}\n</code></pre> <pre><code>package store.order;\n\nimport java.util.List;\n\nimport lombok.Builder;\n\n@Builder\npublic record OrderOut(\n    String id,\n    String date,\n    List&lt;ItemOut&gt; items,\n    Double total\n) {\n\n}\n</code></pre> <pre><code>\n</code></pre> <pre><code>\n</code></pre> mvn clean install"},{"location":"order/order/#orderservice","title":"order.service","text":"<pre><code>\ud83d\udcc1 api/\n\u2514\u2500\u2500 \ud83d\udcc1 order.service/\n    \u251c\u2500\u2500 \ud83d\udcc1 k8s/\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc4 k8s.yaml\n    \u251c\u2500\u2500 \ud83d\udcc1 src/\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc1 main/\n    \u2502       \u251c\u2500\u2500 \ud83d\udcc1 java/\n    \u2502       \u2502   \u2514\u2500\u2500 \ud83d\udcc1 store/\n    \u2502       \u2502       \u2514\u2500\u2500 \ud83d\udcc1 order/\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 Order.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 OrderItem.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 OrderApplication.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 OrderModel.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 OrderParser.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 OrderRepository.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 OrderResource.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 OrderService.java\n    \u2502       \u2502           \u2514\u2500\u2500 \ud83d\udcc4 FeignAuthInterceptor.java\n    \u2502       \u2514\u2500\u2500 \ud83d\udcc1 resources/\n    \u2502           \u251c\u2500\u2500 \ud83d\udcc4 application.yaml\n    \u2502           \u2514\u2500\u2500 \ud83d\udcc1 db/\n    \u2502               \u2514\u2500\u2500 \ud83d\udcc1 migration/\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 V2025.08.29.001__create_schema.sql\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 V2025.08.29.002__create_table_order.sql\n    \u2502                   \u2514\u2500\u2500 \ud83d\udcc4 V2025.08.29.003__create_table_order_item.sql\n    \u251c\u2500\u2500 \ud83d\udcc4 pom.xml\n    \u251c\u2500\u2500 \ud83d\udcc4 Dockerfile\n    \u2514\u2500\u2500 \ud83d\udcc4 Jenkinsfile\n</code></pre> Source pom.xmlDockerfileJenkinsfilek8s.yamlapplication.yamlOrder.javaOrderItem.javaOrderApplication.javaOrderService.javaOrderResource.javaOrderRepository.javaFeignAuthInterceptor.javaV2025.08.29.001__create_schema.sqlV2025.08.29.002__create_table_order.sqlV2025.08.29.003__create_table_order_item.sql <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;3.5.5&lt;/version&gt;\n        &lt;relativePath/&gt;\n    &lt;/parent&gt;\n\n    &lt;groupId&gt;store&lt;/groupId&gt;\n    &lt;artifactId&gt;order-service&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt;\n\n    &lt;properties&gt;\n        &lt;java.version&gt;21&lt;/java.version&gt;\n        &lt;spring-cloud.version&gt;2025.0.0&lt;/spring-cloud.version&gt;\n        &lt;maven.compiler.proc&gt;full&lt;/maven.compiler.proc&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;\n            &lt;artifactId&gt;order&lt;/artifactId&gt;\n            &lt;version&gt;${project.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;\n            &lt;artifactId&gt;product&lt;/artifactId&gt;\n            &lt;version&gt;${project.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;\n            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.flywaydb&lt;/groupId&gt;\n            &lt;artifactId&gt;flyway-core&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.flywaydb&lt;/groupId&gt;\n            &lt;artifactId&gt;flyway-database-postgresql&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n\n    &lt;/dependencies&gt;\n\n    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n                &lt;version&gt;${spring-cloud.version}&lt;/version&gt;\n                &lt;type&gt;pom&lt;/type&gt;\n                &lt;scope&gt;import&lt;/scope&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n                &lt;configuration&gt;\n                    &lt;excludes&gt;\n                        &lt;exclude&gt;\n                            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n                            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n                        &lt;/exclude&gt;\n                    &lt;/excludes&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n\n&lt;/project&gt;\n</code></pre> <pre><code>FROM openjdk:23-slim\nVOLUME /tmp\nCOPY target/*.jar app.jar\nENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]\n</code></pre> <pre><code>pipeline {\n    agent any\n    environment {\n        SERVICE = 'order'\n        NAME = \"luigilopesz/${env.SERVICE}\"\n    }\n    stages {\n        stage('Dependencies') {\n            steps {\n                build job: 'order', wait: true\n            }\n        }\n        stage('Build') { \n            steps {\n                sh 'mvn -B -DskipTests clean package'\n            }\n        }      \n        stage('Build &amp; Push Image') {\n            steps {\n                withCredentials([usernamePassword(\n                    credentialsId: 'dockerhub-credential',\n                    usernameVariable: 'USERNAME',\n                    passwordVariable: 'TOKEN')])\n                {\n                    sh \"docker login -u $USERNAME -p $TOKEN\"\n                    sh \"docker buildx create --use --platform=linux/arm64,linux/amd64 --node multi-platform-builder-${env.SERVICE} --name multi-platform-builder-${env.SERVICE}\"\n                    sh \"docker buildx build --platform=linux/arm64,linux/amd64 --push --tag ${env.NAME}:latest --tag ${env.NAME}:${env.BUILD_ID} -f Dockerfile .\"\n                    sh \"docker buildx rm --force multi-platform-builder-${env.SERVICE}\"\n                }\n            }\n        }\n    }\n}\n</code></pre> <pre><code>\n</code></pre> <pre><code>\n</code></pre> <pre><code>package store.order;\n\nimport java.time.LocalDateTime;\nimport java.util.List;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.experimental.Accessors;\n\n@Data @Builder @Accessors(fluent = true, chain = true)\npublic class Order {\n  String id;\n  String accountId;\n  LocalDateTime date;\n  List&lt;ItemOut&gt; items;\n  Double total;\n}\n</code></pre> <pre><code>\n</code></pre> <pre><code>package store.order;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.openfeign.EnableFeignClients;\n\n@EnableFeignClients(basePackages = \"store.product\")\n@SpringBootApplication\npublic class OrderApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(OrderApplication.class, args);\n    }\n\n}\n</code></pre> <pre><code>package store.order;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.web.server.ResponseStatusException;\n\nimport store.product.ProductController;\nimport store.product.ProductOut;\n\n@Service\npublic class OrderService {\n\n  @Autowired\n  private OrderRepository orderRepository;\n\n  @Autowired\n  private ProductController productController;\n\n  @Transactional\n  public OrderOut create(OrderIn in, String idAccount) {\n    if (in == null || in.items() == null || in.items().isEmpty()) {\n      throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"Items are mandatory\");\n    }\n\n    List&lt;ProductOut&gt; products = new ArrayList&lt;&gt;();\n    in.items().forEach(it -&gt; {\n      ProductOut p = productController.findById(it.productId()).getBody();\n      if (p == null) {\n        throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"Product not found: \" + it.productId());\n      }\n      products.add(p);\n    });\n\n    OrderModel om = OrderParser.toModel(in, idAccount);\n\n    double orderTotal = 0.0;\n    for (int i = 0; i &lt; in.items().size(); i++) {\n      var inItem = in.items().get(i);\n      var product = products.get(i);\n\n      double total = product.price() * inItem.quantity();\n\n      ItemModel im = new ItemModel();\n      im.setOrder(om);\n      im.setProductId(inItem.productId());\n      im.setQuantity(inItem.quantity());\n      im.setTotal(total);\n\n      om.getItems().add(im);\n      orderTotal += total;\n    }\n    om.setTotal(orderTotal);\n\n    OrderModel saved = orderRepository.save(om);\n    return OrderParser.toOut(saved, products);\n  }\n\n  public List&lt;OrderOut&gt; findAll(String idAccount) {\n    var list = orderRepository.findAllByAccountId(idAccount);\n    return list.stream().map(om -&gt; {\n      List&lt;ProductOut&gt; products = om.getItems().stream()\n          .map(it -&gt; productController.findById(it.getProductId()).getBody())\n          .toList();\n      return OrderParser.toOut(om, products);\n    }).toList();\n  }\n\n  public OrderOut findById(String id, String idAccount) {\n    OrderModel om = orderRepository.findByIdAndAccountId(id, idAccount)\n      .orElseThrow(() -&gt; new ResponseStatusException(HttpStatus.NOT_FOUND, \"Order not found\"));\n\n    // carrega os produtos dos itens desse pedido\n    List&lt;ProductOut&gt; products = om.getItems().stream()\n        .map(it -&gt; productController.findById(it.getProductId()).getBody())\n        .toList();\n\n    return OrderParser.toOut(om, products);\n  }\n}\n</code></pre> <pre><code>package store.order;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n\n@RestController\npublic class OrderResource implements OrderController {\n\n  @Autowired\n  private OrderService orderService;\n\n  @Override\n  public ResponseEntity&lt;OrderOut&gt; create(String accountId, OrderIn in) {\n    OrderOut out = orderService.create(in, accountId);\n    return ResponseEntity.created(\n        ServletUriComponentsBuilder.fromCurrentRequest()\n            .path(\"/{id}\")\n            .buildAndExpand(out.id())\n            .toUri()\n    ).body(out);\n  }\n\n  @Override\n  public ResponseEntity&lt;List&lt;OrderOut&gt;&gt; findAll(String accountId) {\n    return ResponseEntity.ok(orderService.findAll(accountId));\n  }\n\n  @Override\n  public ResponseEntity&lt;OrderOut&gt; findById(String accountId, String id) {\n    return ResponseEntity.ok(orderService.findById(id, accountId));\n  }\n}\n</code></pre> <p>``` { .java .copy .select linenums=\"1\" } package store.order;</p> <p>import java.util.List; import java.util.Optional; import org.springframework.data.repository.CrudRepository; import org.springframework.stereotype.Repository;</p> <p>@Repository public interface OrderRepository extends CrudRepository {</p> <p>List findAllByAccountId(String idAccount);</p> <p>Optional findByIdAndAccountId(String id, String idAccount); }</p> <pre><code>\n</code></pre> <p>``` { .sql .copy .select linenums=\"1\" }</p> <pre><code>\n</code></pre> <pre><code>\n</code></pre> mvn clean package spring-boot:run"},{"location":"product/product/","title":"4. Product API","text":""},{"location":"product/product/#product-api","title":"Product API","text":"<p>A Product API implementa o CRUD de produtos do dom\u00ednio <code>store</code>, seguindo o mesmo padr\u00e3o adotado no projeto: interface (<code>product</code>) e service (<code>product.service</code>) por tr\u00e1s do gateway e protegido por JWT.</p> <p>Trusted layer e seguran\u00e7a</p> <p>Toda requisi\u00e7\u00e3o externa entra pelo gateway. As rotas <code>/product/**</code> s\u00e3o protegidas: \u00e9 obrigat\u00f3rio enviar <code>Authorization: Bearer &lt;jwt&gt;</code>.</p>"},{"location":"product/product/#visao-geral","title":"Vis\u00e3o geral","text":"<ul> <li>Interface (<code>product</code>): define o contrato (DTOs e Feign) consumido por outros m\u00f3dulos/fronts.</li> <li>Service (<code>product.service</code>): implementa\u00e7\u00e3o REST, regras de neg\u00f3cio, persist\u00eancia (JPA), e migra\u00e7\u00f5es (Flyway).</li> </ul> <pre><code>classDiagram\n    namespace product {\n        class ProductController {\n            +create(ProductIn ProductIn): ProductOut\n            +delete(String id): void\n            +findAll(): List&lt;ProductOut&gt;\n            +findById(String id): ProductOut\n        }\n        class ProductIn {\n            -String name\n            -Double price\n            -String unit\n        }\n        class ProductOut {\n            -String id\n            -String name\n            -Double price\n            -String unit\n        }\n    }\n    namespace product.service {\n        class ProductResource {\n            +create(ProductIn ProductIn): ProductOut\n            +delete(String id): void\n            +findAll(): List&lt;ProductOut&gt;\n            +findById(String id): ProductOut\n        }\n        class ProductService {\n            +create(ProductIn ProductIn): ProductOut\n            +delete(String id): void\n            +findAll(): List&lt;ProductOut&gt;\n            +findById(String id): ProductOut\n        }\n        class ProductRepository {\n            +create(ProductIn ProductIn): ProductOut\n            +delete(String id): void\n            +findAll(): List&lt;ProductOut&gt;\n            +findById(String id): ProductOut\n        }\n        class Product {\n            -String id\n            -String name\n            -Double price\n            -String unit\n        }\n        class ProductModel {\n            +create(ProductIn ProductIn): ProductOut\n            +delete(String id): void\n            +findAll(): List&lt;ProductOut&gt;\n            +findById(String id): ProductOut\n        }\n    }\n    &lt;&lt;Interface&gt;&gt; ProductController\n    ProductController ..&gt; ProductIn\n    ProductController ..&gt; ProductOut\n\n    &lt;&lt;Interface&gt;&gt; ProductRepository\n    ProductController &lt;|-- ProductResource\n    ProductResource *-- ProductService\n    ProductService *-- ProductRepository\n    ProductService ..&gt; Product\n    ProductService ..&gt; ProductModel\n    ProductRepository ..&gt; ProductModel</code></pre>"},{"location":"product/product/#estrutura-da-requisicao","title":"Estrutura da requisi\u00e7\u00e3o","text":"<pre><code>flowchart LR\n    subgraph api [Trusted Layer]\n        direction TB\n        gateway --&gt; account\n        gateway --&gt; auth\n        account --&gt; db@{ shape: cyl, label: \"Database\" }\n        auth --&gt; account\n        gateway e5@==&gt;|\"\"| product:::red\n        product e2@==&gt;|\"\"| db\n    end\n    internet e1@==&gt;|request| gateway\n    e1@{ animate: true }\n    e2@{ animate: true }\n    e5@{ animate: true }\n    classDef red fill:#fcc\n    click product \"#product-api\" \"Product API\"</code></pre>"},{"location":"product/product/#product","title":"Product","text":"<pre><code>\ud83d\udcc1 api/\n\u2514\u2500\u2500 \ud83d\udcc1 product/\n    \u251c\u2500\u2500 \ud83d\udcc1 src/\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc1 main/\n    \u2502       \u2514\u2500\u2500 \ud83d\udcc1 java/\n    \u2502           \u2514\u2500\u2500 \ud83d\udcc1 store/\n    \u2502               \u2514\u2500\u2500 \ud83d\udcc1 product/\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 ProductController.java\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 ProductIn.java\n    \u2502                   \u2514\u2500\u2500 \ud83d\udcc4 ProductOut.java\n    \u251c\u2500\u2500 \ud83d\udcc4 pom.xml\n    \u2514\u2500\u2500 \ud83d\udcc4 Jenkinsfile\n</code></pre> Source pom.xmlJenkinsfileProductControllerProductInProductOut <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;3.5.5&lt;/version&gt;\n        &lt;relativePath/&gt;\n    &lt;/parent&gt;\n\n    &lt;groupId&gt;store&lt;/groupId&gt;\n    &lt;artifactId&gt;product&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt;\n\n    &lt;properties&gt;\n        &lt;java.version&gt;21&lt;/java.version&gt;\n        &lt;spring-cloud.version&gt;2025.0.0&lt;/spring-cloud.version&gt;\n        &lt;maven.compiler.proc&gt;full&lt;/maven.compiler.proc&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n                &lt;version&gt;${spring-cloud.version}&lt;/version&gt;\n                &lt;type&gt;pom&lt;/type&gt;\n                &lt;scope&gt;import&lt;/scope&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n\n&lt;/project&gt;\n</code></pre> <pre><code>pipeline {\n    agent any\n\n    stages {\n        stage('Build') {\n            steps {\n                sh 'mvn -B -DskipTests clean install'\n            }\n        }\n    }\n\n}\n</code></pre> ProductController.java<pre><code>package store.product;\n\nimport java.util.List;\n\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\n\n@FeignClient(name = \"product\", url = \"http://product:8080\")\npublic interface ProductController {\n\n    @PostMapping(\"/product\")\n    public ResponseEntity&lt;ProductOut&gt; create(\n        @RequestBody ProductIn in\n    );\n\n    @GetMapping(\"/product/{id}\")\n    public ResponseEntity&lt;ProductOut&gt; findById(\n        @PathVariable(\"id\") String id\n    );\n\n    @GetMapping(\"/product\")\n    public ResponseEntity&lt;List&lt;ProductOut&gt;&gt; findAll();\n\n    @GetMapping(\"/product/search/{name}\")\n    public ResponseEntity&lt;List&lt;ProductOut&gt;&gt; findByName(\n        @PathVariable(\"name\") String name\n    );\n\n    @DeleteMapping(\"/product/{id}\")\n    public ResponseEntity&lt;Void&gt; delete(\n        @PathVariable(\"id\") String id\n    );\n\n}\n</code></pre> ProductIn.java<pre><code>package store.product;\n\nimport lombok.Builder;\n\n@Builder\npublic record ProductIn(\n    String name,\n    Float price,\n    String unit\n) {}\n</code></pre> ProductOut.java<pre><code>package store.product;\n\nimport lombok.Builder;\n\n@Builder\npublic record ProductOut(\n    String id,\n    String name,\n    Float price,\n    String unit\n) {}\n</code></pre> mvn clean install"},{"location":"product/product/#productservice","title":"product.service","text":"<pre><code>\ud83d\udcc1 api/\n\u2514\u2500\u2500 \ud83d\udcc1 product.service/\n    \u251c\u2500\u2500 \ud83d\udcc1 k8s/\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc4 k8s.yaml\n    \u251c\u2500\u2500 \ud83d\udcc1 src/\n    \u2502   \u2514\u2500\u2500 \ud83d\udcc1 main/\n    \u2502       \u251c\u2500\u2500 \ud83d\udcc1 java/\n    \u2502       \u2502   \u2514\u2500\u2500 \ud83d\udcc1 store/\n    \u2502       \u2502       \u2514\u2500\u2500 \ud83d\udcc1 product/\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 Product.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 ProductApplication.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 ProductModel.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 ProductParser.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 ProductRepository.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 ProductResource.java\n    \u2502       \u2502           \u251c\u2500\u2500 \ud83d\udcc4 ProductService.java\n    \u2502       \u2502           \u2514\u2500\u2500 \ud83d\udcc4 RedisCacheConfig.java\n    \u2502       \u2514\u2500\u2500 \ud83d\udcc1 resources/\n    \u2502           \u251c\u2500\u2500 \ud83d\udcc4 application.yaml\n    \u2502           \u2514\u2500\u2500 \ud83d\udcc1 db/\n    \u2502               \u2514\u2500\u2500 \ud83d\udcc1 migration/\n    \u2502                   \u251c\u2500\u2500 \ud83d\udcc4 V2025.08.29.001__create_schema.sql\n    \u2502                   \u2514\u2500\u2500 \ud83d\udcc4 V2025.08.29.002__create_table_product.sql\n    \u251c\u2500\u2500 \ud83d\udcc4 pom.xml\n    \u251c\u2500\u2500 \ud83d\udcc4 Dockerfile\n    \u2514\u2500\u2500 \ud83d\udcc4 Jenkinsfile\n</code></pre> Source pom.xmlDockerfileJenkinsfilek8s.yamlapplication.yamlProduct.javaProductApplication.javaProductModel.javaProductParser.javaProductRepository.javaProductResource.javaProductService.javaRedisCacheConfig.javaV2025.08.29.001__create_schema.sqlV2025.08.29.002__create_table_product.sql <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;3.5.5&lt;/version&gt;\n        &lt;relativePath/&gt;\n    &lt;/parent&gt;\n\n    &lt;groupId&gt;store&lt;/groupId&gt;\n    &lt;artifactId&gt;product-service&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0&lt;/version&gt;\n\n    &lt;properties&gt;\n        &lt;java.version&gt;21&lt;/java.version&gt;\n        &lt;spring-cloud.version&gt;2025.0.0&lt;/spring-cloud.version&gt;\n        &lt;maven.compiler.proc&gt;full&lt;/maven.compiler.proc&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;${project.groupId}&lt;/groupId&gt;\n            &lt;artifactId&gt;product&lt;/artifactId&gt;\n            &lt;version&gt;${project.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.postgresql&lt;/groupId&gt;\n            &lt;artifactId&gt;postgresql&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.flywaydb&lt;/groupId&gt;\n            &lt;artifactId&gt;flyway-core&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.flywaydb&lt;/groupId&gt;\n            &lt;artifactId&gt;flyway-database-postgresql&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n\n    &lt;/dependencies&gt;\n\n    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n                &lt;version&gt;${spring-cloud.version}&lt;/version&gt;\n                &lt;type&gt;pom&lt;/type&gt;\n                &lt;scope&gt;import&lt;/scope&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n                &lt;configuration&gt;\n                    &lt;excludes&gt;\n                        &lt;exclude&gt;\n                            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n                            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n                        &lt;/exclude&gt;\n                    &lt;/excludes&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n\n&lt;/project&gt;\n</code></pre> <pre><code>FROM openjdk:23-slim\nVOLUME /tmp\nCOPY target/*.jar app.jar\nENTRYPOINT [\"java\",\"-jar\",\"/app.jar\"]\n</code></pre> <pre><code>pipeline {\n    agent any\n    environment {\n        SERVICE = 'product'\n        NAME = \"luigilopesz/${env.SERVICE}\"\n    }\n    stages {\n        stage('Dependencies') {\n            steps {\n                build job: 'product', wait: true\n            }\n        }\n        stage('Build') { \n            steps {\n                sh 'mvn -B -DskipTests clean package'\n            }\n        }      \n        stage('Build &amp; Push Image') {\n            steps {\n                withCredentials([usernamePassword(\n                    credentialsId: 'dockerhub-credential',\n                    usernameVariable: 'USERNAME',\n                    passwordVariable: 'TOKEN')])\n                {\n                    sh \"docker login -u $USERNAME -p $TOKEN\"\n                    sh \"docker buildx create --use --platform=linux/arm64,linux/amd64 --node multi-platform-builder-${env.SERVICE} --name multi-platform-builder-${env.SERVICE}\"\n                    sh \"docker buildx build --platform=linux/arm64,linux/amd64 --push --tag ${env.NAME}:latest --tag ${env.NAME}:${env.BUILD_ID} -f Dockerfile .\"\n                    sh \"docker buildx rm --force multi-platform-builder-${env.SERVICE}\"\n                }\n            }\n        }\n    }\n}\n</code></pre> <pre><code>\n</code></pre> <pre><code>\n</code></pre> <pre><code>package store.product;\n\n\n\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.experimental.Accessors;\n\n@Builder\n@Data \n@Accessors(fluent = true, chain = true) \npublic class Product {\n\n    private String id;\n    private String name;\n    private Double price;\n    private String unit;\n}\n</code></pre> <pre><code>package store.product;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class ProductApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ProductApplication.class, args);\n    }\n\n}\n</code></pre> <pre><code>package store.product;\n\nimport java.util.Date;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.Table;\nimport lombok.AllArgsConstructor;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\nimport lombok.experimental.Accessors;\n\n@Entity\n@Table(name = \"product\")\n@Setter @Accessors(fluent = true, chain = true)\n@NoArgsConstructor @AllArgsConstructor\npublic class ProductModel {\n\n    @Id\n    @Column(name = \"id\")\n    @GeneratedValue(strategy = GenerationType.UUID)\n    private String id;\n\n    @Column(name = \"name\")\n    private String name;\n\n    @Column(name = \"price\")\n    private Double price;\n\n    @Column(name = \"unit\")\n    private String unit;\n\n\n    public ProductModel(Product p) {\n        this.id = p.id();\n        this.name = p.name();\n        this.price = p.price();\n        this.unit = p.unit();\n\n    }\n\n    public Product to() {\n        return Product.builder()\n            .id(this.id)\n            .name(this.name)\n            .price(this.price)\n            .unit(this.unit)\n            .build();\n    }\n\n}\n</code></pre> <pre><code>package store.product;\n\nimport java.util.List;\n\npublic class ProductParser {\n\n    public static Product to(ProductIn in) {\n        return in == null ? null :\n            Product.builder()\n                .name(in.name())\n                .price(in.price())\n                .unit(in.unit())\n                .build();\n    }\n\n    public static ProductOut to(Product p) {\n        return p == null ? null :\n            ProductOut.builder()\n                .id(p.id())\n                .name(p.name())\n                .price(p.price())\n                .unit(p.unit())\n                .build();\n    }\n\n    public static List&lt;ProductOut&gt; to(List&lt;Product&gt; ps) {\n        return ps == null ? null :\n            ps.stream().map(ProductParser::to).toList();\n    }\n\n}\n</code></pre> <pre><code>package store.product;\n\nimport java.util.Optional;\n\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface ProductRepository extends CrudRepository&lt;ProductModel, String&gt; {\n    // find by name\n    Optional&lt;ProductModel&gt; findByName(String name);\n\n    // find by \"like\" name\n    Iterable&lt;ProductModel&gt; findByNameContaining(String name);\n}\n</code></pre> <pre><code>package store.product;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n\n@RestController\npublic class ProductResource implements ProductController {\n\n    @Autowired\n    private ProductService productService;\n\n    @Override\n    public ResponseEntity&lt;ProductOut&gt; create(ProductIn in) {\n        // parser ProductIn to Product\n        Product product = ProductParser.to(in);\n\n        Product saved = productService.create(product);\n\n        // parser Product to ProductOut and build to\n        // HATEAOS standard\n        return ResponseEntity\n            .created(\n                ServletUriComponentsBuilder.fromCurrentRequest()\n                    .path(\"/{id}\")\n                    .buildAndExpand(saved.id())\n                    .toUri()\n            ).body(ProductParser.to(saved));\n    }\n\n    @Override\n    public ResponseEntity&lt;ProductOut&gt; findById(String id) {\n        return ResponseEntity\n            .ok(ProductParser.to(productService.findById(id)));\n    }\n\n    @Override\n    public ResponseEntity&lt;List&lt;ProductOut&gt;&gt; findAll() {\n        return ResponseEntity\n            .ok()\n            .body(ProductParser.to(productService.findAll()));\n    }\n\n    @Override\n    public ResponseEntity&lt;List&lt;ProductOut&gt;&gt; findByName(String name) {\n        return ResponseEntity\n            .ok()\n            .body(ProductParser.to(productService.findByName(name)));\n    }\n\n    @Override\n    public ResponseEntity&lt;Void&gt; delete(String id) {\n        productService.delete(id);\n        return ResponseEntity\n            .noContent()\n            .build();\n    }\n\n}\n</code></pre> <pre><code>package store.product;\n\n\nimport java.util.List;\nimport java.util.stream.StreamSupport;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.server.ResponseStatusException;\n\n@Service\npublic class ProductService {\n\n    @Autowired\n    private ProductRepository productRepository;\n\n    public Product create(Product product) {\n        if (null == product.name()) {\n            throw new ResponseStatusException(HttpStatus.BAD_REQUEST,\n                \"Name is mandatory!\"\n            );\n        }\n        // clean special caracters\n        product.name(product.name().trim());\n\n        if (null == product.price()) {\n            throw new ResponseStatusException(HttpStatus.BAD_REQUEST,\n                \"Price is mandatory!\"\n            );\n        }\n\n        if (null == product.unit()) {\n            throw new ResponseStatusException(HttpStatus.BAD_REQUEST,\n                \"Unit is mandatory!\"\n            );\n        }\n\n        // if not Optional.empty\n        if (productRepository.findByName(product.name()).isPresent()) {\n            throw new ResponseStatusException(HttpStatus.BAD_REQUEST,\n                \"Name already have been registered!\"\n            );\n        }\n\n        return productRepository.save(\n            new ProductModel(product)\n        ).to();\n    }\n\n    public List&lt;Product&gt; findAll() {\n        return StreamSupport.stream(\n            productRepository.findAll().spliterator(), false)\n            .map(ProductModel::to)\n            .toList();\n    }\n\n    public Product findById(String id) {\n        return productRepository.findById(id).map(ProductModel::to).orElse(null);\n    }\n\n    public List&lt;Product&gt; findByName(String name) {\n        return StreamSupport.stream(\n            productRepository.findByNameContaining(name).spliterator(), false)\n            .map(ProductModel::to)\n            .toList();\n    }\n\n    public void delete(String id) {\n        productRepository.delete(productRepository.findById(id).orElseThrow(() -&gt;\n            new ResponseStatusException(HttpStatus.NOT_FOUND, \"Product not found!\")\n        ));\n    }\n}\n</code></pre> <pre><code>\n</code></pre> <pre><code>\n</code></pre> <pre><code>\n</code></pre> mvn clean package spring-boot:run"},{"location":"projeto/","title":"Projeto","text":""},{"location":"projeto/#documentacao-do-projeto","title":"Documenta\u00e7\u00e3o do Projeto","text":"<p>Este projeto \u00e9 um exemplo de arquitetura de microservi\u00e7os. O objetivo \u00e9 demonstrar como os microservi\u00e7os podem ser usados para construir uma aplica\u00e7\u00e3o complexa e escal\u00e1vel.</p> <p>O projeto consiste em v\u00e1rios microservi\u00e7os, cada um com uma responsabilidade espec\u00edfica:</p> <ul> <li>Account Service: Gerencia as contas dos usu\u00e1rios.</li> <li>Auth Service: Lida com a autentica\u00e7\u00e3o e autoriza\u00e7\u00e3o dos usu\u00e1rios.</li> <li>Gateway Service: Atua como um ponto de entrada para todas as requisi\u00e7\u00f5es, roteando-as para o servi\u00e7o apropriado.</li> <li>Product Service: Gerencia os produtos.</li> <li>Order Service: Gerencia os pedidos.</li> <li>Exchange Service: Fornece taxas de c\u00e2mbio.</li> </ul>"}]}